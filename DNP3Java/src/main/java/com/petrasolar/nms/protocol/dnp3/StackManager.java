/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.petrasolar.nms.protocol.dnp3;

public class StackManager {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected StackManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(StackManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        javadnp3JNI.delete_StackManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public StackManager() {
    this(javadnp3JNI.new_StackManager(), true);
  }

  public void AddTCPClient(String arName, PhysLayerSettings aPhys, String arAddr, int aPort) {
    javadnp3JNI.StackManager_AddTCPClient(swigCPtr, this, arName, PhysLayerSettings.getCPtr(aPhys), aPhys, arAddr, aPort);
  }

  public void AddTCPServer(String arName, PhysLayerSettings aPhys, String arEndpoint, int aPort) {
    javadnp3JNI.StackManager_AddTCPServer(swigCPtr, this, arName, PhysLayerSettings.getCPtr(aPhys), aPhys, arEndpoint, aPort);
  }

  public void AddSerial(String arName, PhysLayerSettings aPhys, SerialSettings aSerial) {
    javadnp3JNI.StackManager_AddSerial(swigCPtr, this, arName, PhysLayerSettings.getCPtr(aPhys), aPhys, SerialSettings.getCPtr(aSerial), aSerial);
  }

  public ICommandAcceptor AddMaster(String arPortName, String arStackName, FilterLevel aLevel, IDataObserver apPublisher, MasterStackConfig arCfg) {
    long cPtr = javadnp3JNI.StackManager_AddMaster(swigCPtr, this, arPortName, arStackName, aLevel.swigValue(), IDataObserver.getCPtr(apPublisher), apPublisher, MasterStackConfig.getCPtr(arCfg), arCfg);
    return (cPtr == 0) ? null : new ICommandAcceptor(cPtr, false);
  }

  public IDataObserver AddSlave(String arPortName, String arStackName, FilterLevel aLevel, ICommandAcceptor apCmdAcceptor, SlaveStackConfig arCfg) {
    long cPtr = javadnp3JNI.StackManager_AddSlave(swigCPtr, this, arPortName, arStackName, aLevel.swigValue(), ICommandAcceptor.getCPtr(apCmdAcceptor), apCmdAcceptor, SlaveStackConfig.getCPtr(arCfg), arCfg);
    return (cPtr == 0) ? null : new IDataObserver(cPtr, false);
  }

  public void RemovePort(String arPortName) {
    javadnp3JNI.StackManager_RemovePort(swigCPtr, this, arPortName);
  }

  public void RemoveStack(String arStackName) {
    javadnp3JNI.StackManager_RemoveStack(swigCPtr, this, arStackName);
  }

  public void AddLogHook(ILogBase arg0) {
    javadnp3JNI.StackManager_AddLogHook(swigCPtr, this, ILogBase.getCPtr(arg0), arg0);
  }

  public VectorOfString GetStackNames() {
    return new VectorOfString(javadnp3JNI.StackManager_GetStackNames(swigCPtr, this), true);
  }

  public VectorOfString GetPortNames() {
    return new VectorOfString(javadnp3JNI.StackManager_GetPortNames(swigCPtr, this), true);
  }

  public void Shutdown() {
    javadnp3JNI.StackManager_Shutdown(swigCPtr, this);
  }

}

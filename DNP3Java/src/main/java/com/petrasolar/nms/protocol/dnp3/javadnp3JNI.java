/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.petrasolar.nms.protocol.dnp3;

public class javadnp3JNI {

  static {
    if(System.getProperty("org.totalgrid.reef.protocol.dnp3.nostaticload") == null) System.loadLibrary("dnp3java_new");
  }

  public final static native long new_VectorOfString__SWIG_0();
  public final static native long new_VectorOfString__SWIG_1(long jarg1);
  public final static native long VectorOfString_size(long jarg1, VectorOfString jarg1_);
  public final static native long VectorOfString_capacity(long jarg1, VectorOfString jarg1_);
  public final static native void VectorOfString_reserve(long jarg1, VectorOfString jarg1_, long jarg2);
  public final static native boolean VectorOfString_isEmpty(long jarg1, VectorOfString jarg1_);
  public final static native void VectorOfString_clear(long jarg1, VectorOfString jarg1_);
  public final static native void VectorOfString_add(long jarg1, VectorOfString jarg1_, String jarg2);
  public final static native String VectorOfString_get(long jarg1, VectorOfString jarg1_, int jarg2);
  public final static native void VectorOfString_set(long jarg1, VectorOfString jarg1_, int jarg2, String jarg3);
  public final static native void delete_VectorOfString(long jarg1);
  public final static native int SIZE_MAX_get();
  public final static native void delete_INotifier(long jarg1);
  public final static native void INotifier_Notify(long jarg1, INotifier jarg1_);
  public final static native long new_INotifier();
  public final static native void INotifier_director_connect(INotifier obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void INotifier_change_ownership(INotifier obj, long cptr, boolean take_or_release);
  public final static native int LEV_EVENT_get();
  public final static native int LEV_ERROR_get();
  public final static native int LEV_WARNING_get();
  public final static native int LEV_INFO_get();
  public final static native int LEV_INTERPRET_get();
  public final static native int LEV_COMM_get();
  public final static native int LEV_DEBUG_get();
  public final static native void FilterAssoc_lev_set(long jarg1, FilterAssoc jarg1_, int jarg2);
  public final static native int FilterAssoc_lev_get(long jarg1, FilterAssoc jarg1_);
  public final static native void FilterAssoc_id_set(long jarg1, FilterAssoc jarg1_, char jarg2);
  public final static native char FilterAssoc_id_get(long jarg1, FilterAssoc jarg1_);
  public final static native long new_FilterAssoc();
  public final static native void delete_FilterAssoc(long jarg1);
  public final static native long LogTypes_NUM_FILTER_get();
  public final static native long LogTypes_filters_get();
  public final static native int LogTypes_MASK_ALL_LEVELS_get();
  public final static native int LogTypes_FilterLevelToMask(int jarg1);
  public final static native int LogTypes_GetFilterMask__SWIG_0(char jarg1);
  public final static native int LogTypes_GetFilterMask__SWIG_1(String jarg1);
  public final static native String LogTypes_GetLevelString(int jarg1);
  public final static native String LogTypes_GetFilterString(int jarg1);
  public final static native long new_LogTypes();
  public final static native void delete_LogTypes(long jarg1);
  public final static native long new_LogEntry__SWIG_0();
  public final static native long new_LogEntry__SWIG_1(int jarg1, String jarg2, String jarg3, String jarg4, int jarg5);
  public final static native String LogEntry_GetDeviceName(long jarg1, LogEntry jarg1_);
  public final static native String LogEntry_GetLocation(long jarg1, LogEntry jarg1_);
  public final static native String LogEntry_GetMessage(long jarg1, LogEntry jarg1_);
  public final static native int LogEntry_GetFilterLevel(long jarg1, LogEntry jarg1_);
  public final static native String LogEntry_GetTimeString(long jarg1, LogEntry jarg1_);
  public final static native long LogEntry_GetTimeStamp(long jarg1, LogEntry jarg1_);
  public final static native int LogEntry_GetErrorCode(long jarg1, LogEntry jarg1_);
  public final static native String LogEntry_LogString__SWIG_0(long jarg1, LogEntry jarg1_, boolean jarg2);
  public final static native String LogEntry_LogString__SWIG_1(long jarg1, LogEntry jarg1_);
  public final static native boolean LogEntry_GetValue__SWIG_0(long jarg1, LogEntry jarg1_, String jarg2, long jarg3);
  public final static native boolean LogEntry_GetValue__SWIG_1(long jarg1, LogEntry jarg1_, String jarg2, long jarg3);
  public final static native boolean LogEntry_GetValue__SWIG_2(long jarg1, LogEntry jarg1_, String jarg2, long jarg3);
  public final static native void LogEntry_AddValue__SWIG_0(long jarg1, LogEntry jarg1_, String jarg2, String jarg3);
  public final static native void LogEntry_AddValue__SWIG_1(long jarg1, LogEntry jarg1_, String jarg2, int jarg3);
  public final static native void LogEntry_AddValue__SWIG_2(long jarg1, LogEntry jarg1_, String jarg2, long jarg3);
  public final static native void delete_LogEntry(long jarg1);
  public final static native void delete_ILogBase(long jarg1);
  public final static native void ILogBase_Log(long jarg1, ILogBase jarg1_, long jarg2, LogEntry jarg2_);
  public final static native void ILogBase_SetVar(long jarg1, ILogBase jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long new_ILogBase();
  public final static native void ILogBase_director_connect(ILogBase obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ILogBase_change_ownership(ILogBase obj, long cptr, boolean take_or_release);
  public final static native String ConvertPhysicalLayerStateToString(int jarg1);
  public final static native long PhysLayerStateToString(long jarg1, int jarg2);
  public final static native void delete_IPhysicalLayerObserver(long jarg1);
  public final static native void IPhysicalLayerObserver_OnStateChange(long jarg1, IPhysicalLayerObserver jarg1_, int jarg2);
  public final static native long new_IPhysicalLayerObserver();
  public final static native void IPhysicalLayerObserver_director_connect(IPhysicalLayerObserver obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IPhysicalLayerObserver_change_ownership(IPhysicalLayerObserver obj, long cptr, boolean take_or_release);
  public final static native long new_PhysLayerSettings__SWIG_0();
  public final static native long new_PhysLayerSettings__SWIG_1(int jarg1, long jarg2, long jarg3, IPhysicalLayerObserver jarg3_);
  public final static native long new_PhysLayerSettings__SWIG_2(int jarg1, long jarg2);
  public final static native void PhysLayerSettings_LogLevel_set(long jarg1, PhysLayerSettings jarg1_, int jarg2);
  public final static native int PhysLayerSettings_LogLevel_get(long jarg1, PhysLayerSettings jarg1_);
  public final static native void PhysLayerSettings_RetryTimeout_set(long jarg1, PhysLayerSettings jarg1_, long jarg2);
  public final static native long PhysLayerSettings_RetryTimeout_get(long jarg1, PhysLayerSettings jarg1_);
  public final static native void PhysLayerSettings_mpObserver_set(long jarg1, PhysLayerSettings jarg1_, long jarg2, IPhysicalLayerObserver jarg2_);
  public final static native long PhysLayerSettings_mpObserver_get(long jarg1, PhysLayerSettings jarg1_);
  public final static native void delete_PhysLayerSettings(long jarg1);
  public final static native void SerialSettings_mDevice_set(long jarg1, SerialSettings jarg1_, String jarg2);
  public final static native String SerialSettings_mDevice_get(long jarg1, SerialSettings jarg1_);
  public final static native void SerialSettings_mBaud_set(long jarg1, SerialSettings jarg1_, int jarg2);
  public final static native int SerialSettings_mBaud_get(long jarg1, SerialSettings jarg1_);
  public final static native void SerialSettings_mDataBits_set(long jarg1, SerialSettings jarg1_, int jarg2);
  public final static native int SerialSettings_mDataBits_get(long jarg1, SerialSettings jarg1_);
  public final static native void SerialSettings_mStopBits_set(long jarg1, SerialSettings jarg1_, int jarg2);
  public final static native int SerialSettings_mStopBits_get(long jarg1, SerialSettings jarg1_);
  public final static native void SerialSettings_mParity_set(long jarg1, SerialSettings jarg1_, int jarg2);
  public final static native int SerialSettings_mParity_get(long jarg1, SerialSettings jarg1_);
  public final static native void SerialSettings_mFlowType_set(long jarg1, SerialSettings jarg1_, int jarg2);
  public final static native int SerialSettings_mFlowType_get(long jarg1, SerialSettings jarg1_);
  public final static native long new_SerialSettings();
  public final static native void delete_SerialSettings(long jarg1);
  public final static native int BQ_ONLINE_get();
  public final static native int BQ_RESTART_get();
  public final static native int BQ_COMM_LOST_get();
  public final static native int BQ_REMOTE_FORCED_DATA_get();
  public final static native int BQ_LOCAL_FORCED_DATA_get();
  public final static native int BQ_CHATTER_FILTER_get();
  public final static native int BQ_RESERVED_get();
  public final static native int BQ_STATE_get();
  public final static native int AQ_ONLINE_get();
  public final static native int AQ_RESTART_get();
  public final static native int AQ_COMM_LOST_get();
  public final static native int AQ_REMOTE_FORCED_DATA_get();
  public final static native int AQ_LOCAL_FORCED_DATA_get();
  public final static native int AQ_OVERRANGE_get();
  public final static native int AQ_REFERENCE_CHECK_get();
  public final static native int AQ_RESERVED_get();
  public final static native int CQ_ONLINE_get();
  public final static native int CQ_RESTART_get();
  public final static native int CQ_COMM_LOST_get();
  public final static native int CQ_REMOTE_FORCED_DATA_get();
  public final static native int CQ_LOCAL_FORCED_DATA_get();
  public final static native int CQ_ROLLOVER_get();
  public final static native int CQ_DISCONTINUITY_get();
  public final static native int CQ_RESERVED_get();
  public final static native int TQ_ONLINE_get();
  public final static native int TQ_RESTART_get();
  public final static native int TQ_COMM_LOST_get();
  public final static native int TQ_REMOTE_FORCED_DATA_get();
  public final static native int TQ_LOCAL_FORCED_DATA_get();
  public final static native int TQ_RESERVED_1_get();
  public final static native int TQ_RESERVED_2_get();
  public final static native int TQ_STATE_get();
  public final static native int PQ_ONLINE_get();
  public final static native int PQ_RESTART_get();
  public final static native int PQ_COMM_LOST_get();
  public final static native int PQ_REMOTE_FORCED_DATA_get();
  public final static native int PQ_RESERVED_1_get();
  public final static native int PQ_RESERVED_2_get();
  public final static native int PQ_RESERVED_3_get();
  public final static native int PQ_RESERVED_4_get();
  public final static native int VQ_ONLINE_get();
  public final static native int VQ_RESTART_get();
  public final static native int VQ_COMM_LOST_get();
  public final static native int VQ_REMOTE_FORCED_DATA_get();
  public final static native int VQ_RESERVED_1_get();
  public final static native int VQ_RESERVED_2_get();
  public final static native int VQ_RESERVED_3_get();
  public final static native int VQ_RESERVED_4_get();
  public final static native int CS_SUCCESS_get();
  public final static native int CS_TIMEOUT_get();
  public final static native int CS_NO_SELECT_get();
  public final static native int CS_FORMAT_ERROR_get();
  public final static native int CS_NOT_SUPPORTED_get();
  public final static native int CS_ALREADY_ACTIVE_get();
  public final static native int CS_HARDWARE_ERROR_get();
  public final static native int CS_LOCAL_get();
  public final static native int CS_TOO_MANY_OPS_get();
  public final static native int CS_NOT_AUTHORIZED_get();
  public final static native int CS_UNDEFINED_get();
  public final static native int ByteToCommandStatus(short jarg1);
  public final static native String ToString__SWIG_0(int jarg1);
  public final static native int CC_NULL_get();
  public final static native int CC_PULSE_get();
  public final static native int CC_LATCH_ON_get();
  public final static native int CC_LATCH_OFF_get();
  public final static native int CC_PULSE_CLOSE_get();
  public final static native int CC_PULSE_TRIP_get();
  public final static native int CC_UNDEFINED_get();
  public final static native int ByteToControlCode(short jarg1);
  public final static native String ToString__SWIG_1(int jarg1);
  public final static native String ToString__SWIG_2(int jarg1);
  public final static native int CommandRequest_GetType(long jarg1, CommandRequest jarg1_);
  public final static native void CommandRequest_mStatus_set(long jarg1, CommandRequest jarg1_, int jarg2);
  public final static native int CommandRequest_mStatus_get(long jarg1, CommandRequest jarg1_);
  public final static native void delete_CommandRequest(long jarg1);
  public final static native long new_BinaryOutput__SWIG_0();
  public final static native long new_BinaryOutput__SWIG_1(int jarg1, short jarg2, long jarg3, long jarg4);
  public final static native long new_BinaryOutput__SWIG_2(int jarg1, short jarg2, long jarg3);
  public final static native long new_BinaryOutput__SWIG_3(int jarg1, short jarg2);
  public final static native long new_BinaryOutput__SWIG_4(int jarg1);
  public final static native int BinaryOutput_GetCode(long jarg1, BinaryOutput jarg1_);
  public final static native void BinaryOutput_mRawCode_set(long jarg1, BinaryOutput jarg1_, short jarg2);
  public final static native short BinaryOutput_mRawCode_get(long jarg1, BinaryOutput jarg1_);
  public final static native void BinaryOutput_mCount_set(long jarg1, BinaryOutput jarg1_, short jarg2);
  public final static native short BinaryOutput_mCount_get(long jarg1, BinaryOutput jarg1_);
  public final static native void BinaryOutput_mOnTimeMS_set(long jarg1, BinaryOutput jarg1_, long jarg2);
  public final static native long BinaryOutput_mOnTimeMS_get(long jarg1, BinaryOutput jarg1_);
  public final static native void BinaryOutput_mOffTimeMS_set(long jarg1, BinaryOutput jarg1_, long jarg2);
  public final static native long BinaryOutput_mOffTimeMS_get(long jarg1, BinaryOutput jarg1_);
  public final static native String BinaryOutput_ToString(long jarg1, BinaryOutput jarg1_);
  public final static native boolean BinaryOutput_boEqual(long jarg1, BinaryOutput jarg1_, long jarg2, BinaryOutput jarg2_);
  public final static native int BinaryOutput_EnumType_get();
  public final static native void delete_BinaryOutput(long jarg1);
  public final static native long new_Setpoint__SWIG_0(short jarg1);
  public final static native long new_Setpoint__SWIG_1(int jarg1);
  public final static native long new_Setpoint__SWIG_2(double jarg1);
  public final static native long new_Setpoint__SWIG_3();
  public final static native String Setpoint_ToString(long jarg1, Setpoint jarg1_);
  public final static native boolean Setpoint_stEqual(long jarg1, Setpoint jarg1_, long jarg2, Setpoint jarg2_);
  public final static native int Setpoint_EnumType_get();
  public final static native int Setpoint_GetIntValue(long jarg1, Setpoint jarg1_);
  public final static native double Setpoint_GetValue(long jarg1, Setpoint jarg1_);
  public final static native void Setpoint_SetValue__SWIG_0(long jarg1, Setpoint jarg1_, double jarg2);
  public final static native void Setpoint_SetValue__SWIG_1(long jarg1, Setpoint jarg1_, int jarg2);
  public final static native int Setpoint_GetOptimalEncodingType(long jarg1, Setpoint jarg1_);
  public final static native int Setpoint_GetEncodingType(long jarg1, Setpoint jarg1_);
  public final static native void Setpoint_SetEncodingType(long jarg1, Setpoint jarg1_, int jarg2);
  public final static native void delete_Setpoint(long jarg1);
  public final static native long new_CommandResponse__SWIG_0();
  public final static native long new_CommandResponse__SWIG_1(int jarg1);
  public final static native void CommandResponse_mResult_set(long jarg1, CommandResponse jarg1_, int jarg2);
  public final static native int CommandResponse_mResult_get(long jarg1, CommandResponse jarg1_);
  public final static native void delete_CommandResponse(long jarg1);
  public final static native String GetDataTypeName(int jarg1);
  public final static native void delete_DataPoint(long jarg1);
  public final static native int DataPoint_GetType(long jarg1, DataPoint jarg1_);
  public final static native long DataPoint_GetTime(long jarg1, DataPoint jarg1_);
  public final static native short DataPoint_GetQuality(long jarg1, DataPoint jarg1_);
  public final static native short DataPoint_GetQualitySwigExplicitDataPoint(long jarg1, DataPoint jarg1_);
  public final static native boolean DataPoint_CheckQualityBit(long jarg1, DataPoint jarg1_, short jarg2);
  public final static native void DataPoint_SetQuality(long jarg1, DataPoint jarg1_, short jarg2);
  public final static native void DataPoint_SetQualitySwigExplicitDataPoint(long jarg1, DataPoint jarg1_, short jarg2);
  public final static native void DataPoint_SetTime(long jarg1, DataPoint jarg1_, long jarg2);
  public final static native void DataPoint_SetToNow(long jarg1, DataPoint jarg1_);
  public final static native String DataPoint_ToString(long jarg1, DataPoint jarg1_);
  public final static native String DataPoint_GetClassMask(long jarg1, DataPoint jarg1_);
  public final static native void DataPoint_SetClassMask(long jarg1, DataPoint jarg1_, String jarg2);
  public final static native int DataPoint_GetGroup(long jarg1, DataPoint jarg1_);
  public final static native void DataPoint_SetGroup(long jarg1, DataPoint jarg1_, int jarg2);
  public final static native int DataPoint_GetVariation(long jarg1, DataPoint jarg1_);
  public final static native void DataPoint_SetVariation(long jarg1, DataPoint jarg1_, int jarg2);
  public final static native long new_DataPoint(short jarg1, int jarg2);
  public final static native void DataPoint_director_connect(DataPoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void DataPoint_change_ownership(DataPoint obj, long cptr, boolean take_or_release);
  public final static native boolean BoolDataPoint_GetValue(long jarg1, BoolDataPoint jarg1_);
  public final static native void BoolDataPoint_SetValue(long jarg1, BoolDataPoint jarg1_, boolean jarg2);
  public final static native short BoolDataPoint_GetQuality(long jarg1, BoolDataPoint jarg1_);
  public final static native short BoolDataPoint_GetQualitySwigExplicitBoolDataPoint(long jarg1, BoolDataPoint jarg1_);
  public final static native void BoolDataPoint_SetQuality(long jarg1, BoolDataPoint jarg1_, short jarg2);
  public final static native void BoolDataPoint_SetQualitySwigExplicitBoolDataPoint(long jarg1, BoolDataPoint jarg1_, short jarg2);
  public final static native void BoolDataPoint_SetQualityValue(long jarg1, BoolDataPoint jarg1_, short jarg2);
  public final static native boolean BoolDataPoint_ShouldGenerateEvent(long jarg1, BoolDataPoint jarg1_, long jarg2, BoolDataPoint jarg2_, double jarg3, long jarg4);
  public final static native String BoolDataPoint_ToString(long jarg1, BoolDataPoint jarg1_);
  public final static native String BoolDataPoint_ToStringSwigExplicitBoolDataPoint(long jarg1, BoolDataPoint jarg1_);
  public final static native boolean BoolDataPoint_bdpEqual(long jarg1, BoolDataPoint jarg1_, long jarg2, BoolDataPoint jarg2_);
  public final static native long new_BoolDataPoint(short jarg1, int jarg2, short jarg3);
  public final static native void delete_BoolDataPoint(long jarg1);
  public final static native void BoolDataPoint_director_connect(BoolDataPoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void BoolDataPoint_change_ownership(BoolDataPoint obj, long cptr, boolean take_or_release);
  public final static native double DoublePoint_GetValue(long jarg1, DoublePoint jarg1_);
  public final static native void DoublePoint_SetValue(long jarg1, DoublePoint jarg1_, double jarg2);
  public final static native boolean DoublePoint_ShouldGenerateEvent(long jarg1, DoublePoint jarg1_, long jarg2, DoublePoint jarg2_, double jarg3, double jarg4);
  public final static native double DoublePoint_MAX_VALUE_get();
  public final static native double DoublePoint_MIN_VALUE_get();
  public final static native String DoublePoint_ToString(long jarg1, DoublePoint jarg1_);
  public final static native String DoublePoint_ToStringSwigExplicitDoublePoint(long jarg1, DoublePoint jarg1_);
  public final static native boolean DoublePoint_tdpEqual(long jarg1, DoublePoint jarg1_, long jarg2, DoublePoint jarg2_);
  public final static native long new_DoublePoint(short jarg1, int jarg2);
  public final static native void delete_DoublePoint(long jarg1);
  public final static native void DoublePoint_director_connect(DoublePoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void DoublePoint_change_ownership(DoublePoint obj, long cptr, boolean take_or_release);
  public final static native long UnsignedPoint_GetValue(long jarg1, UnsignedPoint jarg1_);
  public final static native void UnsignedPoint_SetValue(long jarg1, UnsignedPoint jarg1_, long jarg2);
  public final static native boolean UnsignedPoint_ShouldGenerateEvent(long jarg1, UnsignedPoint jarg1_, long jarg2, UnsignedPoint jarg2_, double jarg3, long jarg4);
  public final static native long UnsignedPoint_MAX_VALUE_get();
  public final static native long UnsignedPoint_MIN_VALUE_get();
  public final static native String UnsignedPoint_ToString(long jarg1, UnsignedPoint jarg1_);
  public final static native String UnsignedPoint_ToStringSwigExplicitUnsignedPoint(long jarg1, UnsignedPoint jarg1_);
  public final static native boolean UnsignedPoint_tdpEqual(long jarg1, UnsignedPoint jarg1_, long jarg2, UnsignedPoint jarg2_);
  public final static native long new_UnsignedPoint(short jarg1, int jarg2);
  public final static native void delete_UnsignedPoint(long jarg1);
  public final static native void UnsignedPoint_director_connect(UnsignedPoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void UnsignedPoint_change_ownership(UnsignedPoint obj, long cptr, boolean take_or_release);
  public final static native long new_Binary__SWIG_0(boolean jarg1, short jarg2);
  public final static native long new_Binary__SWIG_1(boolean jarg1);
  public final static native long new_Binary__SWIG_2();
  public final static native int Binary_MeasEnum_get();
  public final static native int Binary_ONLINE_get();
  public final static native boolean Binary_get_binary(long jarg1, Binary jarg1_);
  public final static native boolean Binary_set_binary(long jarg1, Binary jarg1_, boolean jarg2);
  public final static native void delete_Binary(long jarg1);
  public final static native void Binary_director_connect(Binary obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Binary_change_ownership(Binary obj, long cptr, boolean take_or_release);
  public final static native long new_ControlStatus__SWIG_0(boolean jarg1, short jarg2);
  public final static native long new_ControlStatus__SWIG_1(boolean jarg1);
  public final static native long new_ControlStatus__SWIG_2();
  public final static native int ControlStatus_MeasEnum_get();
  public final static native int ControlStatus_ONLINE_get();
  public final static native boolean ControlStatus_get_controlstatus(long jarg1, ControlStatus jarg1_);
  public final static native boolean ControlStatus_set_controlstatus(long jarg1, ControlStatus jarg1_, boolean jarg2);
  public final static native void delete_ControlStatus(long jarg1);
  public final static native void ControlStatus_director_connect(ControlStatus obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ControlStatus_change_ownership(ControlStatus obj, long cptr, boolean take_or_release);
  public final static native long new_Analog__SWIG_0();
  public final static native long new_Analog__SWIG_1(double jarg1, short jarg2);
  public final static native long new_Analog__SWIG_2(double jarg1);
  public final static native int Analog_MeasEnum_get();
  public final static native int Analog_ONLINE_get();
  public final static native double Analog_get_analog(long jarg1, Analog jarg1_);
  public final static native double Analog_set_analog(long jarg1, Analog jarg1_, double jarg2);
  public final static native void delete_Analog(long jarg1);
  public final static native void Analog_director_connect(Analog obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Analog_change_ownership(Analog obj, long cptr, boolean take_or_release);
  public final static native long new_Counter__SWIG_0();
  public final static native long new_Counter__SWIG_1(long jarg1, short jarg2);
  public final static native long new_Counter__SWIG_2(long jarg1);
  public final static native int Counter_ONLINE_get();
  public final static native int Counter_MeasEnum_get();
  public final static native short Counter_get_counter(long jarg1, Counter jarg1_);
  public final static native short Counter_set_counter(long jarg1, Counter jarg1_, short jarg2);
  public final static native void delete_Counter(long jarg1);
  public final static native void Counter_director_connect(Counter obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Counter_change_ownership(Counter obj, long cptr, boolean take_or_release);
  public final static native long new_SetpointStatus__SWIG_0();
  public final static native long new_SetpointStatus__SWIG_1(double jarg1, short jarg2);
  public final static native long new_SetpointStatus__SWIG_2(double jarg1);
  public final static native int SetpointStatus_ONLINE_get();
  public final static native int SetpointStatus_MeasEnum_get();
  public final static native double SetpointStatus_get_setpointstatus(long jarg1, SetpointStatus jarg1_);
  public final static native double SetpointStatus_set_setpointstatus(long jarg1, SetpointStatus jarg1_, double jarg2);
  public final static native void delete_SetpointStatus(long jarg1);
  public final static native void SetpointStatus_director_connect(SetpointStatus obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void SetpointStatus_change_ownership(SetpointStatus obj, long cptr, boolean take_or_release);
  public final static native long new_ITransactable();
  public final static native void delete_ITransactable(long jarg1);
  public final static native void ITransactable_Start(long jarg1, ITransactable jarg1_);
  public final static native void ITransactable_End(long jarg1, ITransactable jarg1_);
  public final static native void ITransactable__Start(long jarg1, ITransactable jarg1_);
  public final static native void ITransactable__End(long jarg1, ITransactable jarg1_);
  public final static native void ITransactable_director_connect(ITransactable obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITransactable_change_ownership(ITransactable obj, long cptr, boolean take_or_release);
  public final static native long new_Transaction__SWIG_0(long jarg1, ITransactable jarg1_);
  public final static native long new_Transaction__SWIG_1();
  public final static native void Transaction_Start(long jarg1, Transaction jarg1_, long jarg2, ITransactable jarg2_);
  public final static native void Transaction_End(long jarg1, Transaction jarg1_);
  public final static native void delete_Transaction(long jarg1);
  public final static native void delete_IDataObserver(long jarg1);
  public final static native void IDataObserver_Update__SWIG_0(long jarg1, IDataObserver jarg1_, long jarg2, Binary jarg2_, long jarg3);
  public final static native void IDataObserver_Update__SWIG_1(long jarg1, IDataObserver jarg1_, long jarg2, Analog jarg2_, long jarg3);
  public final static native void IDataObserver_Update__SWIG_2(long jarg1, IDataObserver jarg1_, long jarg2, Counter jarg2_, long jarg3);
  public final static native void IDataObserver_Update__SWIG_3(long jarg1, IDataObserver jarg1_, long jarg2, ControlStatus jarg2_, long jarg3);
  public final static native void IDataObserver_Update__SWIG_4(long jarg1, IDataObserver jarg1_, long jarg2, SetpointStatus jarg2_, long jarg3);
  public final static native void IDataObserver__Update__SWIG_0(long jarg1, IDataObserver jarg1_, long jarg2, Binary jarg2_, long jarg3);
  public final static native void IDataObserver__Update__SWIG_1(long jarg1, IDataObserver jarg1_, long jarg2, Analog jarg2_, long jarg3);
  public final static native void IDataObserver__Update__SWIG_2(long jarg1, IDataObserver jarg1_, long jarg2, Counter jarg2_, long jarg3);
  public final static native void IDataObserver__Update__SWIG_3(long jarg1, IDataObserver jarg1_, long jarg2, ControlStatus jarg2_, long jarg3);
  public final static native void IDataObserver__Update__SWIG_4(long jarg1, IDataObserver jarg1_, long jarg2, SetpointStatus jarg2_, long jarg3);
  public final static native long new_IDataObserver();
  public final static native void IDataObserver_director_connect(IDataObserver obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IDataObserver_change_ownership(IDataObserver obj, long cptr, boolean take_or_release);
  public final static native void delete_IResponseAcceptor(long jarg1);
  public final static native void IResponseAcceptor_AcceptResponse(long jarg1, IResponseAcceptor jarg1_, long jarg2, CommandResponse jarg2_, int jarg3);
  public final static native long new_IResponseAcceptor();
  public final static native void IResponseAcceptor_director_connect(IResponseAcceptor obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IResponseAcceptor_change_ownership(IResponseAcceptor obj, long cptr, boolean take_or_release);
  public final static native void delete_ICommandAcceptor(long jarg1);
  public final static native void ICommandAcceptor_AcceptCommand__SWIG_0(long jarg1, ICommandAcceptor jarg1_, long jarg2, BinaryOutput jarg2_, long jarg3, int jarg4, long jarg5, IResponseAcceptor jarg5_);
  public final static native void ICommandAcceptor_AcceptCommand__SWIG_1(long jarg1, ICommandAcceptor jarg1_, long jarg2, Setpoint jarg2_, long jarg3, int jarg4, long jarg5, IResponseAcceptor jarg5_);
  public final static native long new_ICommandAcceptor();
  public final static native void ICommandAcceptor_director_connect(ICommandAcceptor obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICommandAcceptor_change_ownership(ICommandAcceptor obj, long cptr, boolean take_or_release);
  public final static native void delete_ICommandHandler(long jarg1);
  public final static native int ICommandHandler_HandleControl__SWIG_0(long jarg1, ICommandHandler jarg1_, long jarg2, BinaryOutput jarg2_, long jarg3);
  public final static native int ICommandHandler_HandleControl__SWIG_1(long jarg1, ICommandHandler jarg1_, long jarg2, Setpoint jarg2_, long jarg3);
  public final static native long new_ICommandHandler();
  public final static native void ICommandHandler_director_connect(ICommandHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICommandHandler_change_ownership(ICommandHandler obj, long cptr, boolean take_or_release);
  public final static native long new_FixedCommandHandler(int jarg1);
  public final static native int FixedCommandHandler_HandleControl__SWIG_0(long jarg1, FixedCommandHandler jarg1_, long jarg2, BinaryOutput jarg2_, long jarg3);
  public final static native int FixedCommandHandler_HandleControlSwigExplicitFixedCommandHandler__SWIG_0(long jarg1, FixedCommandHandler jarg1_, long jarg2, BinaryOutput jarg2_, long jarg3);
  public final static native int FixedCommandHandler_HandleControl__SWIG_1(long jarg1, FixedCommandHandler jarg1_, long jarg2, Setpoint jarg2_, long jarg3);
  public final static native int FixedCommandHandler_HandleControlSwigExplicitFixedCommandHandler__SWIG_1(long jarg1, FixedCommandHandler jarg1_, long jarg2, Setpoint jarg2_, long jarg3);
  public final static native void FixedCommandHandler_mStatus_set(long jarg1, FixedCommandHandler jarg1_, int jarg2);
  public final static native int FixedCommandHandler_mStatus_get(long jarg1, FixedCommandHandler jarg1_);
  public final static native void delete_FixedCommandHandler(long jarg1);
  public final static native void FixedCommandHandler_director_connect(FixedCommandHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void FixedCommandHandler_change_ownership(FixedCommandHandler obj, long cptr, boolean take_or_release);
  public final static native void delete_ICommandSource(long jarg1);
  public final static native void ICommandSource_SetNotifier(long jarg1, ICommandSource jarg1_, long jarg2, INotifier jarg2_);
  public final static native boolean ICommandSource_ExecuteCommand(long jarg1, ICommandSource jarg1_, long jarg2, ICommandHandler jarg2_);
  public final static native long new_ICommandSource();
  public final static native void ICommandSource_director_connect(ICommandSource obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICommandSource_change_ownership(ICommandSource obj, long cptr, boolean take_or_release);
  public final static native long new_VtoRouterSettings__SWIG_0();
  public final static native long new_VtoRouterSettings__SWIG_1(short jarg1, boolean jarg2, boolean jarg3, long jarg4);
  public final static native long new_VtoRouterSettings__SWIG_2(short jarg1, boolean jarg2, boolean jarg3);
  public final static native void VtoRouterSettings_CHANNEL_ID_set(long jarg1, VtoRouterSettings jarg1_, short jarg2);
  public final static native short VtoRouterSettings_CHANNEL_ID_get(long jarg1, VtoRouterSettings jarg1_);
  public final static native void VtoRouterSettings_OPEN_RETRY_MS_set(long jarg1, VtoRouterSettings jarg1_, long jarg2);
  public final static native long VtoRouterSettings_OPEN_RETRY_MS_get(long jarg1, VtoRouterSettings jarg1_);
  public final static native void VtoRouterSettings_START_LOCAL_set(long jarg1, VtoRouterSettings jarg1_, boolean jarg2);
  public final static native boolean VtoRouterSettings_START_LOCAL_get(long jarg1, VtoRouterSettings jarg1_);
  public final static native void VtoRouterSettings_DISABLE_EXTENSIONS_set(long jarg1, VtoRouterSettings jarg1_, boolean jarg2);
  public final static native boolean VtoRouterSettings_DISABLE_EXTENSIONS_get(long jarg1, VtoRouterSettings jarg1_);
  public final static native void delete_VtoRouterSettings(long jarg1);
  public final static native long new_VtoRouterConfig();
  public final static native void VtoRouterConfig_mPhysicalLayerName_set(long jarg1, VtoRouterConfig jarg1_, String jarg2);
  public final static native String VtoRouterConfig_mPhysicalLayerName_get(long jarg1, VtoRouterConfig jarg1_);
  public final static native void VtoRouterConfig_mSettings_set(long jarg1, VtoRouterConfig jarg1_, long jarg2, VtoRouterSettings jarg2_);
  public final static native long VtoRouterConfig_mSettings_get(long jarg1, VtoRouterConfig jarg1_);
  public final static native void delete_VtoRouterConfig(long jarg1);
  public final static native long new_VtoConfig();
  public final static native void VtoConfig_AddVtoRouterConfig(long jarg1, VtoConfig jarg1_, long jarg2, VtoRouterConfig jarg2_);
  public final static native void VtoConfig_mRouterConfigs_set(long jarg1, VtoConfig jarg1_, long jarg2, VectorOfVtoRouterConfig jarg2_);
  public final static native long VtoConfig_mRouterConfigs_get(long jarg1, VtoConfig jarg1_);
  public final static native void delete_VtoConfig(long jarg1);
  public final static native long new_VectorOfVtoRouterConfig__SWIG_0();
  public final static native long new_VectorOfVtoRouterConfig__SWIG_1(long jarg1);
  public final static native long VectorOfVtoRouterConfig_size(long jarg1, VectorOfVtoRouterConfig jarg1_);
  public final static native long VectorOfVtoRouterConfig_capacity(long jarg1, VectorOfVtoRouterConfig jarg1_);
  public final static native void VectorOfVtoRouterConfig_reserve(long jarg1, VectorOfVtoRouterConfig jarg1_, long jarg2);
  public final static native boolean VectorOfVtoRouterConfig_isEmpty(long jarg1, VectorOfVtoRouterConfig jarg1_);
  public final static native void VectorOfVtoRouterConfig_clear(long jarg1, VectorOfVtoRouterConfig jarg1_);
  public final static native void VectorOfVtoRouterConfig_add(long jarg1, VectorOfVtoRouterConfig jarg1_, long jarg2, VtoRouterConfig jarg2_);
  public final static native long VectorOfVtoRouterConfig_get(long jarg1, VectorOfVtoRouterConfig jarg1_, int jarg2);
  public final static native void VectorOfVtoRouterConfig_set(long jarg1, VectorOfVtoRouterConfig jarg1_, int jarg2, long jarg3, VtoRouterConfig jarg3_);
  public final static native void delete_VectorOfVtoRouterConfig(long jarg1);
  public final static native int PC_CLASS_0_get();
  public final static native int PC_CLASS_1_get();
  public final static native int PC_CLASS_2_get();
  public final static native int PC_CLASS_3_get();
  public final static native int PC_ALL_EVENTS_get();
  public final static native int PC_INVALID_get();
  public final static native int IntToPointClass(int jarg1);
  public final static native long new_LinkConfig__SWIG_0(boolean jarg1, boolean jarg2, long jarg3, int jarg4, int jarg5, long jarg6);
  public final static native long new_LinkConfig__SWIG_1(boolean jarg1, boolean jarg2);
  public final static native void LinkConfig_IsMaster_set(long jarg1, LinkConfig jarg1_, boolean jarg2);
  public final static native boolean LinkConfig_IsMaster_get(long jarg1, LinkConfig jarg1_);
  public final static native void LinkConfig_UseConfirms_set(long jarg1, LinkConfig jarg1_, boolean jarg2);
  public final static native boolean LinkConfig_UseConfirms_get(long jarg1, LinkConfig jarg1_);
  public final static native void LinkConfig_NumRetry_set(long jarg1, LinkConfig jarg1_, long jarg2);
  public final static native long LinkConfig_NumRetry_get(long jarg1, LinkConfig jarg1_);
  public final static native void LinkConfig_LocalAddr_set(long jarg1, LinkConfig jarg1_, int jarg2);
  public final static native int LinkConfig_LocalAddr_get(long jarg1, LinkConfig jarg1_);
  public final static native void LinkConfig_RemoteAddr_set(long jarg1, LinkConfig jarg1_, int jarg2);
  public final static native int LinkConfig_RemoteAddr_get(long jarg1, LinkConfig jarg1_);
  public final static native void LinkConfig_Timeout_set(long jarg1, LinkConfig jarg1_, long jarg2);
  public final static native long LinkConfig_Timeout_get(long jarg1, LinkConfig jarg1_);
  public final static native void delete_LinkConfig(long jarg1);
  public final static native long new_AppConfig__SWIG_0();
  public final static native long new_AppConfig__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long new_AppConfig__SWIG_2(long jarg1, long jarg2);
  public final static native long new_AppConfig__SWIG_3(long jarg1);
  public final static native void AppConfig_RspTimeout_set(long jarg1, AppConfig jarg1_, long jarg2);
  public final static native long AppConfig_RspTimeout_get(long jarg1, AppConfig jarg1_);
  public final static native void AppConfig_NumRetry_set(long jarg1, AppConfig jarg1_, long jarg2);
  public final static native long AppConfig_NumRetry_get(long jarg1, AppConfig jarg1_);
  public final static native void AppConfig_FragSize_set(long jarg1, AppConfig jarg1_, long jarg2);
  public final static native long AppConfig_FragSize_get(long jarg1, AppConfig jarg1_);
  public final static native void delete_AppConfig(long jarg1);
  public final static native void ExceptionScan_ClassMask_set(long jarg1, ExceptionScan jarg1_, int jarg2);
  public final static native int ExceptionScan_ClassMask_get(long jarg1, ExceptionScan jarg1_);
  public final static native void ExceptionScan_ScanRate_set(long jarg1, ExceptionScan jarg1_, long jarg2);
  public final static native long ExceptionScan_ScanRate_get(long jarg1, ExceptionScan jarg1_);
  public final static native long new_ExceptionScan();
  public final static native void delete_ExceptionScan(long jarg1);
  public final static native String ConvertStackStateToString(int jarg1);
  public final static native void delete_IStackObserver(long jarg1);
  public final static native void IStackObserver_OnStateChange(long jarg1, IStackObserver jarg1_, int jarg2);
  public final static native long new_IStackObserver();
  public final static native void IStackObserver_director_connect(IStackObserver obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IStackObserver_change_ownership(IStackObserver obj, long cptr, boolean take_or_release);
  public final static native long new_ClassMask__SWIG_0(boolean jarg1, boolean jarg2, boolean jarg3);
  public final static native long new_ClassMask__SWIG_1();
  public final static native void ClassMask_class1_set(long jarg1, ClassMask jarg1_, boolean jarg2);
  public final static native boolean ClassMask_class1_get(long jarg1, ClassMask jarg1_);
  public final static native void ClassMask_class2_set(long jarg1, ClassMask jarg1_, boolean jarg2);
  public final static native boolean ClassMask_class2_get(long jarg1, ClassMask jarg1_);
  public final static native void ClassMask_class3_set(long jarg1, ClassMask jarg1_, boolean jarg2);
  public final static native boolean ClassMask_class3_get(long jarg1, ClassMask jarg1_);
  public final static native int ClassMask_GetMask(boolean jarg1, boolean jarg2, boolean jarg3);
  public final static native boolean ClassMask_IsEnabled(long jarg1, ClassMask jarg1_);
  public final static native void delete_ClassMask(long jarg1);
  public final static native long new_VectorOfExceptionScan__SWIG_0();
  public final static native long new_VectorOfExceptionScan__SWIG_1(long jarg1);
  public final static native long VectorOfExceptionScan_size(long jarg1, VectorOfExceptionScan jarg1_);
  public final static native long VectorOfExceptionScan_capacity(long jarg1, VectorOfExceptionScan jarg1_);
  public final static native void VectorOfExceptionScan_reserve(long jarg1, VectorOfExceptionScan jarg1_, long jarg2);
  public final static native boolean VectorOfExceptionScan_isEmpty(long jarg1, VectorOfExceptionScan jarg1_);
  public final static native void VectorOfExceptionScan_clear(long jarg1, VectorOfExceptionScan jarg1_);
  public final static native void VectorOfExceptionScan_add(long jarg1, VectorOfExceptionScan jarg1_, long jarg2, ExceptionScan jarg2_);
  public final static native long VectorOfExceptionScan_get(long jarg1, VectorOfExceptionScan jarg1_, int jarg2);
  public final static native void VectorOfExceptionScan_set(long jarg1, VectorOfExceptionScan jarg1_, int jarg2, long jarg3, ExceptionScan jarg3_);
  public final static native void delete_VectorOfExceptionScan(long jarg1);
  public final static native long new_MasterConfig();
  public final static native void MasterConfig_AddExceptionScan(long jarg1, MasterConfig jarg1_, int jarg2, long jarg3);
  public final static native void MasterConfig_FragSize_set(long jarg1, MasterConfig jarg1_, long jarg2);
  public final static native long MasterConfig_FragSize_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_VtoWriterQueueSize_set(long jarg1, MasterConfig jarg1_, long jarg2);
  public final static native long MasterConfig_VtoWriterQueueSize_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_UseNonStandardVtoFunction_set(long jarg1, MasterConfig jarg1_, boolean jarg2);
  public final static native boolean MasterConfig_UseNonStandardVtoFunction_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_AllowTimeSync_set(long jarg1, MasterConfig jarg1_, boolean jarg2);
  public final static native boolean MasterConfig_AllowTimeSync_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_DoUnsolOnStartup_set(long jarg1, MasterConfig jarg1_, boolean jarg2);
  public final static native boolean MasterConfig_DoUnsolOnStartup_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_EnableUnsol_set(long jarg1, MasterConfig jarg1_, boolean jarg2);
  public final static native boolean MasterConfig_EnableUnsol_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_UnsolClassMask_set(long jarg1, MasterConfig jarg1_, int jarg2);
  public final static native int MasterConfig_UnsolClassMask_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_IntegrityRate_set(long jarg1, MasterConfig jarg1_, long jarg2);
  public final static native long MasterConfig_IntegrityRate_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_TaskRetryRate_set(long jarg1, MasterConfig jarg1_, long jarg2);
  public final static native long MasterConfig_TaskRetryRate_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_mScans_set(long jarg1, MasterConfig jarg1_, long jarg2, VectorOfExceptionScan jarg2_);
  public final static native long MasterConfig_mScans_get(long jarg1, MasterConfig jarg1_);
  public final static native void MasterConfig_mpObserver_set(long jarg1, MasterConfig jarg1_, long jarg2, IStackObserver jarg2_);
  public final static native long MasterConfig_mpObserver_get(long jarg1, MasterConfig jarg1_);
  public final static native void delete_MasterConfig(long jarg1);
  public final static native long new_GrpVar__SWIG_0();
  public final static native long new_GrpVar__SWIG_1(int jarg1, int jarg2);
  public final static native void GrpVar_Grp_set(long jarg1, GrpVar jarg1_, int jarg2);
  public final static native int GrpVar_Grp_get(long jarg1, GrpVar jarg1_);
  public final static native void GrpVar_Var_set(long jarg1, GrpVar jarg1_, int jarg2);
  public final static native int GrpVar_Var_get(long jarg1, GrpVar jarg1_);
  public final static native void delete_GrpVar(long jarg1);
  public final static native long new_EventMaxConfig__SWIG_0();
  public final static native long new_EventMaxConfig__SWIG_1(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void EventMaxConfig_mMaxBinaryEvents_set(long jarg1, EventMaxConfig jarg1_, long jarg2);
  public final static native long EventMaxConfig_mMaxBinaryEvents_get(long jarg1, EventMaxConfig jarg1_);
  public final static native void EventMaxConfig_mMaxAnalogEvents_set(long jarg1, EventMaxConfig jarg1_, long jarg2);
  public final static native long EventMaxConfig_mMaxAnalogEvents_get(long jarg1, EventMaxConfig jarg1_);
  public final static native void EventMaxConfig_mMaxCounterEvents_set(long jarg1, EventMaxConfig jarg1_, long jarg2);
  public final static native long EventMaxConfig_mMaxCounterEvents_get(long jarg1, EventMaxConfig jarg1_);
  public final static native void EventMaxConfig_mMaxVtoEvents_set(long jarg1, EventMaxConfig jarg1_, long jarg2);
  public final static native long EventMaxConfig_mMaxVtoEvents_get(long jarg1, EventMaxConfig jarg1_);
  public final static native void delete_EventMaxConfig(long jarg1);
  public final static native long new_SlaveConfig();
  public final static native void SlaveConfig_mMaxControls_set(long jarg1, SlaveConfig jarg1_, long jarg2);
  public final static native long SlaveConfig_mMaxControls_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mDisableUnsol_set(long jarg1, SlaveConfig jarg1_, boolean jarg2);
  public final static native boolean SlaveConfig_mDisableUnsol_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mUnsolMask_set(long jarg1, SlaveConfig jarg1_, long jarg2, ClassMask jarg2_);
  public final static native long SlaveConfig_mUnsolMask_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mAllowTimeSync_set(long jarg1, SlaveConfig jarg1_, boolean jarg2);
  public final static native boolean SlaveConfig_mAllowTimeSync_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mTimeSyncPeriod_set(long jarg1, SlaveConfig jarg1_, long jarg2);
  public final static native long SlaveConfig_mTimeSyncPeriod_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mUnsolPackDelay_set(long jarg1, SlaveConfig jarg1_, long jarg2);
  public final static native long SlaveConfig_mUnsolPackDelay_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mUnsolRetryDelay_set(long jarg1, SlaveConfig jarg1_, long jarg2);
  public final static native long SlaveConfig_mUnsolRetryDelay_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mMaxFragSize_set(long jarg1, SlaveConfig jarg1_, long jarg2);
  public final static native long SlaveConfig_mMaxFragSize_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mVtoWriterQueueSize_set(long jarg1, SlaveConfig jarg1_, long jarg2);
  public final static native long SlaveConfig_mVtoWriterQueueSize_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mEventMaxConfig_set(long jarg1, SlaveConfig jarg1_, long jarg2, EventMaxConfig jarg2_);
  public final static native long SlaveConfig_mEventMaxConfig_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mStaticBinary_set(long jarg1, SlaveConfig jarg1_, long jarg2, GrpVar jarg2_);
  public final static native long SlaveConfig_mStaticBinary_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mStaticAnalog_set(long jarg1, SlaveConfig jarg1_, long jarg2, GrpVar jarg2_);
  public final static native long SlaveConfig_mStaticAnalog_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mStaticCounter_set(long jarg1, SlaveConfig jarg1_, long jarg2, GrpVar jarg2_);
  public final static native long SlaveConfig_mStaticCounter_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mStaticSetpointStatus_set(long jarg1, SlaveConfig jarg1_, long jarg2, GrpVar jarg2_);
  public final static native long SlaveConfig_mStaticSetpointStatus_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mEventBinary_set(long jarg1, SlaveConfig jarg1_, long jarg2, GrpVar jarg2_);
  public final static native long SlaveConfig_mEventBinary_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mEventAnalog_set(long jarg1, SlaveConfig jarg1_, long jarg2, GrpVar jarg2_);
  public final static native long SlaveConfig_mEventAnalog_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mEventCounter_set(long jarg1, SlaveConfig jarg1_, long jarg2, GrpVar jarg2_);
  public final static native long SlaveConfig_mEventCounter_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mEventVto_set(long jarg1, SlaveConfig jarg1_, long jarg2, GrpVar jarg2_);
  public final static native long SlaveConfig_mEventVto_get(long jarg1, SlaveConfig jarg1_);
  public final static native void SlaveConfig_mpObserver_set(long jarg1, SlaveConfig jarg1_, long jarg2, IStackObserver jarg2_);
  public final static native long SlaveConfig_mpObserver_get(long jarg1, SlaveConfig jarg1_);
  public final static native void delete_SlaveConfig(long jarg1);
  public final static native long new_PointRecord__SWIG_0(String jarg1);
  public final static native long new_PointRecord__SWIG_1();
  public final static native void PointRecord_Name_set(long jarg1, PointRecord jarg1_, String jarg2);
  public final static native String PointRecord_Name_get(long jarg1, PointRecord jarg1_);
  public final static native void delete_PointRecord(long jarg1);
  public final static native long new_EventPointRecord__SWIG_0(String jarg1, int jarg2);
  public final static native long new_EventPointRecord__SWIG_1();
  public final static native void EventPointRecord_EventClass_set(long jarg1, EventPointRecord jarg1_, int jarg2);
  public final static native int EventPointRecord_EventClass_get(long jarg1, EventPointRecord jarg1_);
  public final static native void delete_EventPointRecord(long jarg1);
  public final static native long new_DeadbandPointRecord__SWIG_0(String jarg1, int jarg2, double jarg3);
  public final static native long new_DeadbandPointRecord__SWIG_1();
  public final static native void DeadbandPointRecord_Deadband_set(long jarg1, DeadbandPointRecord jarg1_, double jarg2);
  public final static native double DeadbandPointRecord_Deadband_get(long jarg1, DeadbandPointRecord jarg1_);
  public final static native void delete_DeadbandPointRecord(long jarg1);
  public final static native long new_ControlRecord__SWIG_0(String jarg1, int jarg2, long jarg3);
  public final static native long new_ControlRecord__SWIG_1(String jarg1, int jarg2);
  public final static native long new_ControlRecord__SWIG_2(String jarg1);
  public final static native long new_ControlRecord__SWIG_3();
  public final static native void ControlRecord_CommandMode_set(long jarg1, ControlRecord jarg1_, int jarg2);
  public final static native int ControlRecord_CommandMode_get(long jarg1, ControlRecord jarg1_);
  public final static native void ControlRecord_SelectTimeoutMS_set(long jarg1, ControlRecord jarg1_, long jarg2);
  public final static native long ControlRecord_SelectTimeoutMS_get(long jarg1, ControlRecord jarg1_);
  public final static native void delete_ControlRecord(long jarg1);
  public final static native long new_VectorOfEventPointRecord__SWIG_0();
  public final static native long new_VectorOfEventPointRecord__SWIG_1(long jarg1);
  public final static native long VectorOfEventPointRecord_size(long jarg1, VectorOfEventPointRecord jarg1_);
  public final static native long VectorOfEventPointRecord_capacity(long jarg1, VectorOfEventPointRecord jarg1_);
  public final static native void VectorOfEventPointRecord_reserve(long jarg1, VectorOfEventPointRecord jarg1_, long jarg2);
  public final static native boolean VectorOfEventPointRecord_isEmpty(long jarg1, VectorOfEventPointRecord jarg1_);
  public final static native void VectorOfEventPointRecord_clear(long jarg1, VectorOfEventPointRecord jarg1_);
  public final static native void VectorOfEventPointRecord_add(long jarg1, VectorOfEventPointRecord jarg1_, long jarg2, EventPointRecord jarg2_);
  public final static native long VectorOfEventPointRecord_get(long jarg1, VectorOfEventPointRecord jarg1_, int jarg2);
  public final static native void VectorOfEventPointRecord_set(long jarg1, VectorOfEventPointRecord jarg1_, int jarg2, long jarg3, EventPointRecord jarg3_);
  public final static native void delete_VectorOfEventPointRecord(long jarg1);
  public final static native long new_VectorOfDeadbandPointRecord__SWIG_0();
  public final static native long new_VectorOfDeadbandPointRecord__SWIG_1(long jarg1);
  public final static native long VectorOfDeadbandPointRecord_size(long jarg1, VectorOfDeadbandPointRecord jarg1_);
  public final static native long VectorOfDeadbandPointRecord_capacity(long jarg1, VectorOfDeadbandPointRecord jarg1_);
  public final static native void VectorOfDeadbandPointRecord_reserve(long jarg1, VectorOfDeadbandPointRecord jarg1_, long jarg2);
  public final static native boolean VectorOfDeadbandPointRecord_isEmpty(long jarg1, VectorOfDeadbandPointRecord jarg1_);
  public final static native void VectorOfDeadbandPointRecord_clear(long jarg1, VectorOfDeadbandPointRecord jarg1_);
  public final static native void VectorOfDeadbandPointRecord_add(long jarg1, VectorOfDeadbandPointRecord jarg1_, long jarg2, DeadbandPointRecord jarg2_);
  public final static native long VectorOfDeadbandPointRecord_get(long jarg1, VectorOfDeadbandPointRecord jarg1_, int jarg2);
  public final static native void VectorOfDeadbandPointRecord_set(long jarg1, VectorOfDeadbandPointRecord jarg1_, int jarg2, long jarg3, DeadbandPointRecord jarg3_);
  public final static native void delete_VectorOfDeadbandPointRecord(long jarg1);
  public final static native long new_VectorOfControlRecord__SWIG_0();
  public final static native long new_VectorOfControlRecord__SWIG_1(long jarg1);
  public final static native long VectorOfControlRecord_size(long jarg1, VectorOfControlRecord jarg1_);
  public final static native long VectorOfControlRecord_capacity(long jarg1, VectorOfControlRecord jarg1_);
  public final static native void VectorOfControlRecord_reserve(long jarg1, VectorOfControlRecord jarg1_, long jarg2);
  public final static native boolean VectorOfControlRecord_isEmpty(long jarg1, VectorOfControlRecord jarg1_);
  public final static native void VectorOfControlRecord_clear(long jarg1, VectorOfControlRecord jarg1_);
  public final static native void VectorOfControlRecord_add(long jarg1, VectorOfControlRecord jarg1_, long jarg2, ControlRecord jarg2_);
  public final static native long VectorOfControlRecord_get(long jarg1, VectorOfControlRecord jarg1_, int jarg2);
  public final static native void VectorOfControlRecord_set(long jarg1, VectorOfControlRecord jarg1_, int jarg2, long jarg3, ControlRecord jarg3_);
  public final static native void delete_VectorOfControlRecord(long jarg1);
  public final static native long new_VectorOfPointRecord__SWIG_0();
  public final static native long new_VectorOfPointRecord__SWIG_1(long jarg1);
  public final static native long VectorOfPointRecord_size(long jarg1, VectorOfPointRecord jarg1_);
  public final static native long VectorOfPointRecord_capacity(long jarg1, VectorOfPointRecord jarg1_);
  public final static native void VectorOfPointRecord_reserve(long jarg1, VectorOfPointRecord jarg1_, long jarg2);
  public final static native boolean VectorOfPointRecord_isEmpty(long jarg1, VectorOfPointRecord jarg1_);
  public final static native void VectorOfPointRecord_clear(long jarg1, VectorOfPointRecord jarg1_);
  public final static native void VectorOfPointRecord_add(long jarg1, VectorOfPointRecord jarg1_, long jarg2, PointRecord jarg2_);
  public final static native long VectorOfPointRecord_get(long jarg1, VectorOfPointRecord jarg1_, int jarg2);
  public final static native void VectorOfPointRecord_set(long jarg1, VectorOfPointRecord jarg1_, int jarg2, long jarg3, PointRecord jarg3_);
  public final static native void delete_VectorOfPointRecord(long jarg1);
  public final static native long new_DeviceTemplate__SWIG_0(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native long new_DeviceTemplate__SWIG_1(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long new_DeviceTemplate__SWIG_2(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long new_DeviceTemplate__SWIG_3(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long new_DeviceTemplate__SWIG_4(long jarg1, long jarg2, long jarg3);
  public final static native long new_DeviceTemplate__SWIG_5(long jarg1, long jarg2);
  public final static native long new_DeviceTemplate__SWIG_6(long jarg1);
  public final static native long new_DeviceTemplate__SWIG_7();
  public final static native void DeviceTemplate_mBinary_set(long jarg1, DeviceTemplate jarg1_, long jarg2, VectorOfEventPointRecord jarg2_);
  public final static native long DeviceTemplate_mBinary_get(long jarg1, DeviceTemplate jarg1_);
  public final static native void DeviceTemplate_mCounter_set(long jarg1, DeviceTemplate jarg1_, long jarg2, VectorOfEventPointRecord jarg2_);
  public final static native long DeviceTemplate_mCounter_get(long jarg1, DeviceTemplate jarg1_);
  public final static native void DeviceTemplate_mAnalog_set(long jarg1, DeviceTemplate jarg1_, long jarg2, VectorOfDeadbandPointRecord jarg2_);
  public final static native long DeviceTemplate_mAnalog_get(long jarg1, DeviceTemplate jarg1_);
  public final static native void DeviceTemplate_mControlStatus_set(long jarg1, DeviceTemplate jarg1_, long jarg2, VectorOfPointRecord jarg2_);
  public final static native long DeviceTemplate_mControlStatus_get(long jarg1, DeviceTemplate jarg1_);
  public final static native void DeviceTemplate_mSetpointStatus_set(long jarg1, DeviceTemplate jarg1_, long jarg2, VectorOfPointRecord jarg2_);
  public final static native long DeviceTemplate_mSetpointStatus_get(long jarg1, DeviceTemplate jarg1_);
  public final static native void DeviceTemplate_mControls_set(long jarg1, DeviceTemplate jarg1_, long jarg2, VectorOfControlRecord jarg2_);
  public final static native long DeviceTemplate_mControls_get(long jarg1, DeviceTemplate jarg1_);
  public final static native void DeviceTemplate_mSetpoints_set(long jarg1, DeviceTemplate jarg1_, long jarg2, VectorOfControlRecord jarg2_);
  public final static native long DeviceTemplate_mSetpoints_get(long jarg1, DeviceTemplate jarg1_);
  public final static native void DeviceTemplate_mStartOnline_set(long jarg1, DeviceTemplate jarg1_, boolean jarg2);
  public final static native boolean DeviceTemplate_mStartOnline_get(long jarg1, DeviceTemplate jarg1_);
  public final static native void DeviceTemplate_Publish(long jarg1, DeviceTemplate jarg1_, long jarg2, IDataObserver jarg2_);
  public final static native void delete_DeviceTemplate(long jarg1);
  public final static native long new_MasterStackConfig();
  public final static native void MasterStackConfig_master_set(long jarg1, MasterStackConfig jarg1_, long jarg2, MasterConfig jarg2_);
  public final static native long MasterStackConfig_master_get(long jarg1, MasterStackConfig jarg1_);
  public final static native void MasterStackConfig_app_set(long jarg1, MasterStackConfig jarg1_, long jarg2, AppConfig jarg2_);
  public final static native long MasterStackConfig_app_get(long jarg1, MasterStackConfig jarg1_);
  public final static native void MasterStackConfig_link_set(long jarg1, MasterStackConfig jarg1_, long jarg2, LinkConfig jarg2_);
  public final static native long MasterStackConfig_link_get(long jarg1, MasterStackConfig jarg1_);
  public final static native void MasterStackConfig_vto_set(long jarg1, MasterStackConfig jarg1_, long jarg2, VtoConfig jarg2_);
  public final static native long MasterStackConfig_vto_get(long jarg1, MasterStackConfig jarg1_);
  public final static native void delete_MasterStackConfig(long jarg1);
  public final static native long new_SlaveStackConfig();
  public final static native void SlaveStackConfig_slave_set(long jarg1, SlaveStackConfig jarg1_, long jarg2, SlaveConfig jarg2_);
  public final static native long SlaveStackConfig_slave_get(long jarg1, SlaveStackConfig jarg1_);
  public final static native void SlaveStackConfig_device_set(long jarg1, SlaveStackConfig jarg1_, long jarg2, DeviceTemplate jarg2_);
  public final static native long SlaveStackConfig_device_get(long jarg1, SlaveStackConfig jarg1_);
  public final static native void SlaveStackConfig_app_set(long jarg1, SlaveStackConfig jarg1_, long jarg2, AppConfig jarg2_);
  public final static native long SlaveStackConfig_app_get(long jarg1, SlaveStackConfig jarg1_);
  public final static native void SlaveStackConfig_link_set(long jarg1, SlaveStackConfig jarg1_, long jarg2, LinkConfig jarg2_);
  public final static native long SlaveStackConfig_link_get(long jarg1, SlaveStackConfig jarg1_);
  public final static native void SlaveStackConfig_vto_set(long jarg1, SlaveStackConfig jarg1_, long jarg2, VtoConfig jarg2_);
  public final static native long SlaveStackConfig_vto_get(long jarg1, SlaveStackConfig jarg1_);
  public final static native void delete_SlaveStackConfig(long jarg1);
  public final static native long new_StackManager();
  public final static native void delete_StackManager(long jarg1);
  public final static native void StackManager_AddTCPClient(long jarg1, StackManager jarg1_, String jarg2, long jarg3, PhysLayerSettings jarg3_, String jarg4, int jarg5);
  public final static native void StackManager_AddTCPServer(long jarg1, StackManager jarg1_, String jarg2, long jarg3, PhysLayerSettings jarg3_, String jarg4, int jarg5);
  public final static native void StackManager_AddSerial(long jarg1, StackManager jarg1_, String jarg2, long jarg3, PhysLayerSettings jarg3_, long jarg4, SerialSettings jarg4_);
  public final static native long StackManager_AddMaster(long jarg1, StackManager jarg1_, String jarg2, String jarg3, int jarg4, long jarg5, IDataObserver jarg5_, long jarg6, MasterStackConfig jarg6_);
  public final static native long StackManager_AddSlave(long jarg1, StackManager jarg1_, String jarg2, String jarg3, int jarg4, long jarg5, ICommandAcceptor jarg5_, long jarg6, SlaveStackConfig jarg6_);
  public final static native void StackManager_RemovePort(long jarg1, StackManager jarg1_, String jarg2);
  public final static native void StackManager_RemoveStack(long jarg1, StackManager jarg1_, String jarg2);
  public final static native void StackManager_AddLogHook(long jarg1, StackManager jarg1_, long jarg2, ILogBase jarg2_);
  public final static native long StackManager_GetStackNames(long jarg1, StackManager jarg1_);
  public final static native long StackManager_GetPortNames(long jarg1, StackManager jarg1_);
  public final static native void StackManager_Shutdown(long jarg1, StackManager jarg1_);
  public final static native long BinaryOutput_SWIGUpcast(long jarg1);
  public final static native long Setpoint_SWIGUpcast(long jarg1);
  public final static native long BoolDataPoint_SWIGUpcast(long jarg1);
  public final static native long DoublePoint_SWIGUpcast(long jarg1);
  public final static native long UnsignedPoint_SWIGUpcast(long jarg1);
  public final static native long Binary_SWIGUpcast(long jarg1);
  public final static native long ControlStatus_SWIGUpcast(long jarg1);
  public final static native long Analog_SWIGUpcast(long jarg1);
  public final static native long Counter_SWIGUpcast(long jarg1);
  public final static native long SetpointStatus_SWIGUpcast(long jarg1);
  public final static native long IDataObserver_SWIGUpcast(long jarg1);
  public final static native long FixedCommandHandler_SWIGUpcast(long jarg1);
  public final static native long EventPointRecord_SWIGUpcast(long jarg1);
  public final static native long DeadbandPointRecord_SWIGUpcast(long jarg1);
  public final static native long ControlRecord_SWIGUpcast(long jarg1);

  public static void SwigDirector_INotifier_Notify(INotifier self) {
    self.Notify();
  }
  public static void SwigDirector_ILogBase_Log(ILogBase self, long arEntry) {
    self.Log(new LogEntry(arEntry, false));
  }
  public static void SwigDirector_ILogBase_SetVar(ILogBase self, String aSource, String aVarName, int aValue) {
    self.SetVar(aSource, aVarName, aValue);
  }
  public static void SwigDirector_IPhysicalLayerObserver_OnStateChange(IPhysicalLayerObserver self, int arg0) {
    self.OnStateChange(PhysicalLayerState.swigToEnum(arg0));
  }
  public static short SwigDirector_DataPoint_GetQuality(DataPoint self) {
    return self.GetQuality();
  }
  public static void SwigDirector_DataPoint_SetQuality(DataPoint self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_DataPoint_ToString(DataPoint self) {
    return self.ToString();
  }
  public static short SwigDirector_BoolDataPoint_GetQuality(BoolDataPoint self) {
    return self.GetQuality();
  }
  public static void SwigDirector_BoolDataPoint_SetQuality(BoolDataPoint self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_BoolDataPoint_ToString(BoolDataPoint self) {
    return self.ToString();
  }
  public static short SwigDirector_DoublePoint_GetQuality(DoublePoint self) {
    return self.GetQuality();
  }
  public static void SwigDirector_DoublePoint_SetQuality(DoublePoint self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_DoublePoint_ToString(DoublePoint self) {
    return self.ToString();
  }
  public static short SwigDirector_UnsignedPoint_GetQuality(UnsignedPoint self) {
    return self.GetQuality();
  }
  public static void SwigDirector_UnsignedPoint_SetQuality(UnsignedPoint self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_UnsignedPoint_ToString(UnsignedPoint self) {
    return self.ToString();
  }
  public static short SwigDirector_Binary_GetQuality(Binary self) {
    return self.GetQuality();
  }
  public static void SwigDirector_Binary_SetQuality(Binary self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_Binary_ToString(Binary self) {
    return self.ToString();
  }
  public static short SwigDirector_ControlStatus_GetQuality(ControlStatus self) {
    return self.GetQuality();
  }
  public static void SwigDirector_ControlStatus_SetQuality(ControlStatus self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_ControlStatus_ToString(ControlStatus self) {
    return self.ToString();
  }
  public static short SwigDirector_Analog_GetQuality(Analog self) {
    return self.GetQuality();
  }
  public static void SwigDirector_Analog_SetQuality(Analog self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_Analog_ToString(Analog self) {
    return self.ToString();
  }
  public static short SwigDirector_Counter_GetQuality(Counter self) {
    return self.GetQuality();
  }
  public static void SwigDirector_Counter_SetQuality(Counter self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_Counter_ToString(Counter self) {
    return self.ToString();
  }
  public static short SwigDirector_SetpointStatus_GetQuality(SetpointStatus self) {
    return self.GetQuality();
  }
  public static void SwigDirector_SetpointStatus_SetQuality(SetpointStatus self, short aQuality) {
    self.SetQuality(aQuality);
  }
  public static String SwigDirector_SetpointStatus_ToString(SetpointStatus self) {
    return self.ToString();
  }
  public static void SwigDirector_ITransactable__Start(ITransactable self) {
    self._Start();
  }
  public static void SwigDirector_ITransactable__End(ITransactable self) {
    self._End();
  }
  public static void SwigDirector_IDataObserver__Start(IDataObserver self) {
    self._Start();
  }
  public static void SwigDirector_IDataObserver__End(IDataObserver self) {
    self._End();
  }
  public static void SwigDirector_IDataObserver__Update__SWIG_0(IDataObserver self, long arPoint, long arg1) {
    self._Update(new Binary(arPoint, false), arg1);
  }
  public static void SwigDirector_IDataObserver__Update__SWIG_1(IDataObserver self, long arPoint, long arg1) {
    self._Update(new Analog(arPoint, false), arg1);
  }
  public static void SwigDirector_IDataObserver__Update__SWIG_2(IDataObserver self, long arPoint, long arg1) {
    self._Update(new Counter(arPoint, false), arg1);
  }
  public static void SwigDirector_IDataObserver__Update__SWIG_3(IDataObserver self, long arPoint, long arg1) {
    self._Update(new ControlStatus(arPoint, false), arg1);
  }
  public static void SwigDirector_IDataObserver__Update__SWIG_4(IDataObserver self, long arPoint, long arg1) {
    self._Update(new SetpointStatus(arPoint, false), arg1);
  }
  public static void SwigDirector_IResponseAcceptor_AcceptResponse(IResponseAcceptor self, long arResponse, int aSequence) {
    self.AcceptResponse(new CommandResponse(arResponse, false), aSequence);
  }
  public static void SwigDirector_ICommandAcceptor_AcceptCommand__SWIG_0(ICommandAcceptor self, long arCommand, long aIndex, int aSequence, long apRspAcceptor) {
    self.AcceptCommand(new BinaryOutput(arCommand, false), aIndex, aSequence, (apRspAcceptor == 0) ? null : new IResponseAcceptor(apRspAcceptor, false));
  }
  public static void SwigDirector_ICommandAcceptor_AcceptCommand__SWIG_1(ICommandAcceptor self, long arCommand, long aIndex, int aSequence, long apRspAcceptor) {
    self.AcceptCommand(new Setpoint(arCommand, false), aIndex, aSequence, (apRspAcceptor == 0) ? null : new IResponseAcceptor(apRspAcceptor, false));
  }
  public static int SwigDirector_ICommandHandler_HandleControl__SWIG_0(ICommandHandler self, long aControl, long aIndex) {
    return (self.HandleControl(new BinaryOutput(aControl, false), aIndex)).swigValue();
  }
  public static int SwigDirector_ICommandHandler_HandleControl__SWIG_1(ICommandHandler self, long aControl, long aIndex) {
    return (self.HandleControl(new Setpoint(aControl, false), aIndex)).swigValue();
  }
  public static int SwigDirector_FixedCommandHandler_HandleControl__SWIG_0(FixedCommandHandler self, long arg0, long arg1) {
    return (self.HandleControl(new BinaryOutput(arg0, false), arg1)).swigValue();
  }
  public static int SwigDirector_FixedCommandHandler_HandleControl__SWIG_1(FixedCommandHandler self, long arg0, long arg1) {
    return (self.HandleControl(new Setpoint(arg0, false), arg1)).swigValue();
  }
  public static void SwigDirector_ICommandSource_SetNotifier(ICommandSource self, long apNotifier) {
    self.SetNotifier((apNotifier == 0) ? null : new INotifier(apNotifier, false));
  }
  public static boolean SwigDirector_ICommandSource_ExecuteCommand(ICommandSource self, long apHandler) {
    return self.ExecuteCommand((apHandler == 0) ? null : new ICommandHandler(apHandler, false));
  }
  public static void SwigDirector_IStackObserver_OnStateChange(IStackObserver self, int aState) {
    self.OnStateChange(StackStates.swigToEnum(aState));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}

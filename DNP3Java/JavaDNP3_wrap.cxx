/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_javadnp3JNI = NULL;
    jmethodID director_methids[50];
  }
}

/* Includes the header in the wrapper code */

#include <APL/IPhysicalLayerObserver.h>
#include <DNP3/StackManager.h>

using namespace apl;
using namespace apl::dnp;



#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< apl::dnp::VtoRouterConfig >::const_reference std_vector_Sl_apl_dnp_VtoRouterConfig_Sg__get(std::vector< apl::dnp::VtoRouterConfig > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_apl_dnp_VtoRouterConfig_Sg__set(std::vector< apl::dnp::VtoRouterConfig > *self,int i,std::vector< apl::dnp::VtoRouterConfig >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< apl::dnp::ExceptionScan >::const_reference std_vector_Sl_apl_dnp_ExceptionScan_Sg__get(std::vector< apl::dnp::ExceptionScan > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_apl_dnp_ExceptionScan_Sg__set(std::vector< apl::dnp::ExceptionScan > *self,int i,std::vector< apl::dnp::ExceptionScan >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< apl::dnp::EventPointRecord >::const_reference std_vector_Sl_apl_dnp_EventPointRecord_Sg__get(std::vector< apl::dnp::EventPointRecord > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_apl_dnp_EventPointRecord_Sg__set(std::vector< apl::dnp::EventPointRecord > *self,int i,std::vector< apl::dnp::EventPointRecord >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< apl::dnp::DeadbandPointRecord >::const_reference std_vector_Sl_apl_dnp_DeadbandPointRecord_Sg__get(std::vector< apl::dnp::DeadbandPointRecord > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_apl_dnp_DeadbandPointRecord_Sg__set(std::vector< apl::dnp::DeadbandPointRecord > *self,int i,std::vector< apl::dnp::DeadbandPointRecord >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< apl::dnp::ControlRecord >::const_reference std_vector_Sl_apl_dnp_ControlRecord_Sg__get(std::vector< apl::dnp::ControlRecord > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_apl_dnp_ControlRecord_Sg__set(std::vector< apl::dnp::ControlRecord > *self,int i,std::vector< apl::dnp::ControlRecord >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< apl::dnp::PointRecord >::const_reference std_vector_Sl_apl_dnp_PointRecord_Sg__get(std::vector< apl::dnp::PointRecord > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_apl_dnp_PointRecord_Sg__set(std::vector< apl::dnp::PointRecord > *self,int i,std::vector< apl::dnp::PointRecord >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "JavaDNP3_wrap.h"

SwigDirector_INotifier::SwigDirector_INotifier(JNIEnv *jenv) : apl::INotifier(), Swig::Director(jenv) {
}

SwigDirector_INotifier::~SwigDirector_INotifier() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_INotifier::Notify() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::INotifier::Notify.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object : _INotifier");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_INotifier::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "Notify", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/INotifier");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ILogBase::SwigDirector_ILogBase(JNIEnv *jenv) : apl::ILogBase(), Swig::Director(jenv) {
}

SwigDirector_ILogBase::~SwigDirector_ILogBase() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ILogBase::Log(apl::LogEntry const &arEntry) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarEntry = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ILogBase::Log.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::LogEntry **)&jarEntry = (apl::LogEntry *) &arEntry; 
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[1], swigjobj, jarEntry);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object:_ILogBase:Log");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ILogBase::SetVar(std::string const &aSource, std::string const &aVarName, int aValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaSource = 0 ;
  jstring jaVarName = 0 ;
  jint jaValue  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ILogBase::SetVar.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaSource = jenv->NewStringUTF((&aSource)->c_str()); 
    jaVarName = jenv->NewStringUTF((&aVarName)->c_str()); 
    jaValue = (jint) aValue;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[2], swigjobj, jaSource, jaVarName, jaValue);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object:_ILogBase:SetVar");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ILogBase::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "Log", "(Lcom/petrasolar/nms/protocol/dnp3/LogEntry;)V", NULL 
    },
    {
      "SetVar", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/ILogBase");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IPhysicalLayerObserver::SwigDirector_IPhysicalLayerObserver(JNIEnv *jenv) : apl::IPhysicalLayerObserver(), Swig::Director(jenv) {
}

SwigDirector_IPhysicalLayerObserver::~SwigDirector_IPhysicalLayerObserver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IPhysicalLayerObserver::OnStateChange(apl::PhysicalLayerState arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jarg0  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IPhysicalLayerObserver::OnStateChange.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = (jint) arg0;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[3], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object: _IPhysicalLayerObserver:OnStateChange");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IPhysicalLayerObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnStateChange", "(Lcom/petrasolar/nms/protocol/dnp3/PhysicalLayerState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/IPhysicalLayerObserver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_DataPoint::SwigDirector_DataPoint(JNIEnv *jenv, boost::uint8_t aQuality, apl::DataTypes aType) : apl::DataPoint(aQuality, aType), Swig::Director(jenv) {
}

SwigDirector_DataPoint::~SwigDirector_DataPoint() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_DataPoint::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::DataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[4], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object: _DataPoint:GetQuality");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_DataPoint::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::DataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[5], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _DataPoint::SetQuality");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_DataPoint::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::DataPoint::ToString.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[6], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object: _DataPoint::ToString()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_DataPoint::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/DataPoint");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_BoolDataPoint::SwigDirector_BoolDataPoint(JNIEnv *jenv, boost::uint8_t aQuality, apl::DataTypes aType, boost::uint8_t aValueMask) : apl::BoolDataPoint(aQuality, aType, aValueMask), Swig::Director(jenv) {
}

SwigDirector_BoolDataPoint::~SwigDirector_BoolDataPoint() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_BoolDataPoint::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::BoolDataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[7], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _BoolDataPoint::GetQuality()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_BoolDataPoint::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::BoolDataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[8], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _BoolDataPoint::SetQuality");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_BoolDataPoint::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return apl::BoolDataPoint::ToString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[9], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object: _BoolDataPoint::ToString() ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_BoolDataPoint::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/BoolDataPoint");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_DoublePoint::SwigDirector_DoublePoint(JNIEnv *jenv, boost::uint8_t aQuality, apl::DataTypes aType) : apl::TypedDataPoint< double >(aQuality, aType), Swig::Director(jenv) {
}

SwigDirector_DoublePoint::~SwigDirector_DoublePoint() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_DoublePoint::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::DataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[10], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object: _DoublePoint::GetQuality()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_DoublePoint::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::DataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[11], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object: _DoublePoint::SetQuality");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_DoublePoint::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return apl::TypedDataPoint< double >::ToString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[12], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _DoublePoint::ToString()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_DoublePoint::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/DoublePoint");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_UnsignedPoint::SwigDirector_UnsignedPoint(JNIEnv *jenv, boost::uint8_t aQuality, apl::DataTypes aType) : apl::TypedDataPoint< boost::uint32_t >(aQuality, aType), Swig::Director(jenv) {
}

SwigDirector_UnsignedPoint::~SwigDirector_UnsignedPoint() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_UnsignedPoint::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::DataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[13], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _UnsignedPoint::GetQuality()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_UnsignedPoint::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::DataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[14], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _UnsignedPoint::SetQuality");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_UnsignedPoint::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return apl::TypedDataPoint< boost::uint32_t >::ToString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[15], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _UnsignedPoint::ToString()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_UnsignedPoint::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/UnsignedPoint");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Binary::SwigDirector_Binary(JNIEnv *jenv, bool aValue, boost::uint8_t aQuality) : apl::Binary(aValue, aQuality), Swig::Director(jenv) {
}

SwigDirector_Binary::SwigDirector_Binary(JNIEnv *jenv) : apl::Binary(), Swig::Director(jenv) {
}

SwigDirector_Binary::~SwigDirector_Binary() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_Binary::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::BoolDataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[16], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object:_Binary::GetQuality()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Binary::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::BoolDataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[17], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object: _Binary::SetQuality");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_Binary::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return apl::BoolDataPoint::ToString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[18], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _Binary::ToString()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Binary::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/Binary");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ControlStatus::SwigDirector_ControlStatus(JNIEnv *jenv, bool aValue, boost::uint8_t aQuality) : apl::ControlStatus(aValue, aQuality), Swig::Director(jenv) {
}

SwigDirector_ControlStatus::SwigDirector_ControlStatus(JNIEnv *jenv) : apl::ControlStatus(), Swig::Director(jenv) {
}

SwigDirector_ControlStatus::~SwigDirector_ControlStatus() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_ControlStatus::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::BoolDataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[19], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _ControlStatus::GetQuality()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ControlStatus::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::BoolDataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[20], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _ControlStatus::SetQuality");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_ControlStatus::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return apl::BoolDataPoint::ToString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[21], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _ControlStatus::ToString()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ControlStatus::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/ControlStatus");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Analog::SwigDirector_Analog(JNIEnv *jenv) : apl::Analog(), Swig::Director(jenv) {
}

SwigDirector_Analog::SwigDirector_Analog(JNIEnv *jenv, double aVal, boost::uint8_t aQuality) : apl::Analog(aVal, aQuality), Swig::Director(jenv) {
}

SwigDirector_Analog::~SwigDirector_Analog() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_Analog::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::DataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[22], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _Analog::GetQuality()");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Analog::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::DataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[23], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object _Analog::SetQuality");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_Analog::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return apl::TypedDataPoint< double >::ToString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[24], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Analog::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/Analog");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Counter::SwigDirector_Counter(JNIEnv *jenv) : apl::Counter(), Swig::Director(jenv) {
}

SwigDirector_Counter::SwigDirector_Counter(JNIEnv *jenv, boost::uint32_t aVal, boost::uint8_t aQuality) : apl::Counter(aVal, aQuality), Swig::Director(jenv) {
}

SwigDirector_Counter::~SwigDirector_Counter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_Counter::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::DataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[25], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Counter::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::DataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[26], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_Counter::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return apl::TypedDataPoint< boost::uint32_t >::ToString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[27], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Counter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/Counter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SetpointStatus::SwigDirector_SetpointStatus(JNIEnv *jenv) : apl::SetpointStatus(), Swig::Director(jenv) {
}

SwigDirector_SetpointStatus::SwigDirector_SetpointStatus(JNIEnv *jenv, double aVal, boost::uint8_t aQuality) : apl::SetpointStatus(aVal, aQuality), Swig::Director(jenv) {
}

SwigDirector_SetpointStatus::~SwigDirector_SetpointStatus() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::uint8_t SwigDirector_SetpointStatus::GetQuality() const {
  boost::uint8_t c_result = SwigValueInit< boost::uint8_t >() ;
  jshort jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return apl::DataPoint::GetQuality();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jshort) jenv->CallStaticShortMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[28], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (boost::uint8_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SetpointStatus::SetQuality(boost::uint8_t aQuality) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jshort jaQuality  ;
  
  if (!swig_override[1]) {
    apl::DataPoint::SetQuality(aQuality);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaQuality = (jshort) aQuality;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[29], swigjobj, jaQuality);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_SetpointStatus::ToString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return apl::TypedDataPoint< double >::ToString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[30], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SetpointStatus::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "GetQuality", "()S", NULL 
    },
    {
      "SetQuality", "(S)V", NULL 
    },
    {
      "ToString", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/SetpointStatus");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ITransactable::SwigDirector_ITransactable(JNIEnv *jenv) : apl::ITransactable(), Swig::Director(jenv) {
}

SwigDirector_ITransactable::~SwigDirector_ITransactable() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ITransactable::_Start() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ITransactable::_Start.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[31], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITransactable::_End() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ITransactable::_End.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[32], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITransactable::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "_Start", "()V", NULL 
    },
    {
      "_End", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/ITransactable");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IDataObserver::SwigDirector_IDataObserver(JNIEnv *jenv) : apl::IDataObserver(), Swig::Director(jenv) {
}

SwigDirector_IDataObserver::~SwigDirector_IDataObserver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IDataObserver::_Start() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IDataObserver::_Start.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[33], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IDataObserver::_End() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IDataObserver::_End.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[34], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IDataObserver::_Update(apl::Binary const &arPoint, size_t arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarPoint = 0 ;
  jlong jarg1  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IDataObserver::_Update.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::Binary **)&jarPoint = (apl::Binary *) &arPoint; 
    jarg1 = (jlong) arg1;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[35], swigjobj, jarPoint, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IDataObserver::_Update(apl::Analog const &arPoint, size_t arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarPoint = 0 ;
  jlong jarg1  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IDataObserver::_Update.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::Analog **)&jarPoint = (apl::Analog *) &arPoint; 
    jarg1 = (jlong) arg1;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[36], swigjobj, jarPoint, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IDataObserver::_Update(apl::Counter const &arPoint, size_t arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarPoint = 0 ;
  jlong jarg1  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IDataObserver::_Update.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::Counter **)&jarPoint = (apl::Counter *) &arPoint; 
    jarg1 = (jlong) arg1;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[37], swigjobj, jarPoint, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IDataObserver::_Update(apl::ControlStatus const &arPoint, size_t arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarPoint = 0 ;
  jlong jarg1  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IDataObserver::_Update.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::ControlStatus **)&jarPoint = (apl::ControlStatus *) &arPoint; 
    jarg1 = (jlong) arg1;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[38], swigjobj, jarPoint, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IDataObserver::_Update(apl::SetpointStatus const &arPoint, size_t arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarPoint = 0 ;
  jlong jarg1  ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IDataObserver::_Update.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::SetpointStatus **)&jarPoint = (apl::SetpointStatus *) &arPoint; 
    jarg1 = (jlong) arg1;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[39], swigjobj, jarPoint, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IDataObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "_Start", "()V", NULL 
    },
    {
      "_End", "()V", NULL 
    },
    {
      "_Update", "(Lcom/petrasolar/nms/protocol/dnp3/Binary;J)V", NULL 
    },
    {
      "_Update", "(Lcom/petrasolar/nms/protocol/dnp3/Analog;J)V", NULL 
    },
    {
      "_Update", "(Lcom/petrasolar/nms/protocol/dnp3/Counter;J)V", NULL 
    },
    {
      "_Update", "(Lcom/petrasolar/nms/protocol/dnp3/ControlStatus;J)V", NULL 
    },
    {
      "_Update", "(Lcom/petrasolar/nms/protocol/dnp3/SetpointStatus;J)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/IDataObserver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IResponseAcceptor::SwigDirector_IResponseAcceptor(JNIEnv *jenv) : apl::IResponseAcceptor(), Swig::Director(jenv) {
}

SwigDirector_IResponseAcceptor::~SwigDirector_IResponseAcceptor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IResponseAcceptor::AcceptResponse(apl::CommandResponse const &arResponse, int aSequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarResponse = 0 ;
  jint jaSequence  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::IResponseAcceptor::AcceptResponse.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::CommandResponse **)&jarResponse = (apl::CommandResponse *) &arResponse; 
    jaSequence = (jint) aSequence;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[40], swigjobj, jarResponse, jaSequence);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IResponseAcceptor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "AcceptResponse", "(Lcom/petrasolar/nms/protocol/dnp3/CommandResponse;I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/IResponseAcceptor");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ICommandAcceptor::SwigDirector_ICommandAcceptor(JNIEnv *jenv) : apl::ICommandAcceptor(), Swig::Director(jenv) {
}

SwigDirector_ICommandAcceptor::~SwigDirector_ICommandAcceptor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ICommandAcceptor::AcceptCommand(apl::BinaryOutput const &arCommand, size_t aIndex, int aSequence, apl::IResponseAcceptor *apRspAcceptor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarCommand = 0 ;
  jlong jaIndex  ;
  jint jaSequence  ;
  jlong japRspAcceptor = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ICommandAcceptor::AcceptCommand.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::BinaryOutput **)&jarCommand = (apl::BinaryOutput *) &arCommand; 
    jaIndex = (jlong) aIndex;
    jaSequence = (jint) aSequence;
    *((apl::IResponseAcceptor **)&japRspAcceptor) = (apl::IResponseAcceptor *) apRspAcceptor; 
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[41], swigjobj, jarCommand, jaIndex, jaSequence, japRspAcceptor);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ICommandAcceptor::AcceptCommand(apl::Setpoint const &arCommand, size_t aIndex, int aSequence, apl::IResponseAcceptor *apRspAcceptor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarCommand = 0 ;
  jlong jaIndex  ;
  jint jaSequence  ;
  jlong japRspAcceptor = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ICommandAcceptor::AcceptCommand.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::Setpoint **)&jarCommand = (apl::Setpoint *) &arCommand; 
    jaIndex = (jlong) aIndex;
    jaSequence = (jint) aSequence;
    *((apl::IResponseAcceptor **)&japRspAcceptor) = (apl::IResponseAcceptor *) apRspAcceptor; 
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[42], swigjobj, jarCommand, jaIndex, jaSequence, japRspAcceptor);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ICommandAcceptor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "AcceptCommand", "(Lcom/petrasolar/nms/protocol/dnp3/BinaryOutput;JILcom/petrasolar/nms/protocol/dnp3/IResponseAcceptor;)V", NULL 
    },
    {
      "AcceptCommand", "(Lcom/petrasolar/nms/protocol/dnp3/Setpoint;JILcom/petrasolar/nms/protocol/dnp3/IResponseAcceptor;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/ICommandAcceptor");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ICommandHandler::SwigDirector_ICommandHandler(JNIEnv *jenv) : apl::ICommandHandler(), Swig::Director(jenv) {
}

SwigDirector_ICommandHandler::~SwigDirector_ICommandHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


apl::CommandStatus SwigDirector_ICommandHandler::HandleControl(apl::BinaryOutput &aControl, size_t aIndex) {
  apl::CommandStatus c_result = SwigValueInit< apl::CommandStatus >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jaControl = 0 ;
  jlong jaIndex  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ICommandHandler::HandleControl.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::BinaryOutput **)&jaControl = (apl::BinaryOutput *) &aControl; 
    jaIndex = (jlong) aIndex;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[43], swigjobj, jaControl, jaIndex);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (apl::CommandStatus)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

apl::CommandStatus SwigDirector_ICommandHandler::HandleControl(apl::Setpoint &aControl, size_t aIndex) {
  apl::CommandStatus c_result = SwigValueInit< apl::CommandStatus >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jaControl = 0 ;
  jlong jaIndex  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ICommandHandler::HandleControl.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::Setpoint **)&jaControl = (apl::Setpoint *) &aControl; 
    jaIndex = (jlong) aIndex;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[44], swigjobj, jaControl, jaIndex);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (apl::CommandStatus)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ICommandHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "HandleControl", "(Lcom/petrasolar/nms/protocol/dnp3/BinaryOutput;J)Lcom/petrasolar/nms/protocol/dnp3/CommandStatus;", NULL 
    },
    {
      "HandleControl", "(Lcom/petrasolar/nms/protocol/dnp3/Setpoint;J)Lcom/petrasolar/nms/protocol/dnp3/CommandStatus;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/ICommandHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_FixedCommandHandler::SwigDirector_FixedCommandHandler(JNIEnv *jenv, apl::CommandStatus aStatus) : apl::FixedCommandHandler(aStatus), Swig::Director(jenv) {
}

SwigDirector_FixedCommandHandler::~SwigDirector_FixedCommandHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


apl::CommandStatus SwigDirector_FixedCommandHandler::HandleControl(apl::BinaryOutput &arg0, size_t arg1) {
  apl::CommandStatus c_result = SwigValueInit< apl::CommandStatus >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  jlong jarg1  ;
  
  if (!swig_override[0]) {
    return apl::FixedCommandHandler::HandleControl(arg0,arg1);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::BinaryOutput **)&jarg0 = (apl::BinaryOutput *) &arg0; 
    jarg1 = (jlong) arg1;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[45], swigjobj, jarg0, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (apl::CommandStatus)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

apl::CommandStatus SwigDirector_FixedCommandHandler::HandleControl(apl::Setpoint &arg0, size_t arg1) {
  apl::CommandStatus c_result = SwigValueInit< apl::CommandStatus >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  jlong jarg1  ;
  
  if (!swig_override[1]) {
    return apl::FixedCommandHandler::HandleControl(arg0,arg1);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(apl::Setpoint **)&jarg0 = (apl::Setpoint *) &arg0; 
    jarg1 = (jlong) arg1;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[46], swigjobj, jarg0, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (apl::CommandStatus)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_FixedCommandHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "HandleControl", "(Lcom/petrasolar/nms/protocol/dnp3/BinaryOutput;J)Lcom/petrasolar/nms/protocol/dnp3/CommandStatus;", NULL 
    },
    {
      "HandleControl", "(Lcom/petrasolar/nms/protocol/dnp3/Setpoint;J)Lcom/petrasolar/nms/protocol/dnp3/CommandStatus;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/FixedCommandHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ICommandSource::SwigDirector_ICommandSource(JNIEnv *jenv) : apl::ICommandSource(), Swig::Director(jenv) {
}

SwigDirector_ICommandSource::~SwigDirector_ICommandSource() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ICommandSource::SetNotifier(apl::INotifier *apNotifier) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japNotifier = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ICommandSource::SetNotifier.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((apl::INotifier **)&japNotifier) = (apl::INotifier *) apNotifier; 
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[47], swigjobj, japNotifier);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ICommandSource::ExecuteCommand(apl::ICommandHandler *apHandler) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japHandler = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::ICommandSource::ExecuteCommand.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((apl::ICommandHandler **)&japHandler) = (apl::ICommandHandler *) apHandler; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[48], swigjobj, japHandler);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ICommandSource::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "SetNotifier", "(Lcom/petrasolar/nms/protocol/dnp3/INotifier;)V", NULL 
    },
    {
      "ExecuteCommand", "(Lcom/petrasolar/nms/protocol/dnp3/ICommandHandler;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/ICommandSource");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IStackObserver::SwigDirector_IStackObserver(JNIEnv *jenv) : apl::dnp::IStackObserver(), Swig::Director(jenv) {
}

SwigDirector_IStackObserver::~SwigDirector_IStackObserver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IStackObserver::OnStateChange(apl::dnp::StackStates aState) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jaState  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method apl::dnp::IStackObserver::OnStateChange.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaState = (jint) aState;
    jenv->CallStaticVoidMethod(Swig::jclass_javadnp3JNI, Swig::director_methids[49], swigjobj, jaState);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IStackObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnStateChange", "(Lcom/petrasolar/nms/protocol/dnp3/StackStates;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/petrasolar/nms/protocol/dnp3/IStackObserver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfString_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VectorOfString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SIZE_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(~0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1INotifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::INotifier *arg1 = (apl::INotifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::INotifier **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_INotifier_1Notify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  apl::INotifier *arg1 = (apl::INotifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::INotifier **)&jarg1; 
  (arg1)->Notify();
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1INotifier(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::INotifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::INotifier *)new SwigDirector_INotifier(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::INotifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_INotifier_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::INotifier *obj = *((apl::INotifier **)&objarg);
  (void)jcls;
  SwigDirector_INotifier *director = dynamic_cast<SwigDirector_INotifier *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_INotifier_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::INotifier *obj = *((apl::INotifier **)&objarg);
  SwigDirector_INotifier *director = dynamic_cast<SwigDirector_INotifier *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LEV_1EVENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::FilterLevel)apl::LEV_EVENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LEV_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::FilterLevel)apl::LEV_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LEV_1WARNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::FilterLevel)apl::LEV_WARNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LEV_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::FilterLevel)apl::LEV_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LEV_1INTERPRET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::FilterLevel)apl::LEV_INTERPRET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LEV_1COMM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::FilterLevel)apl::LEV_COMM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LEV_1DEBUG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::FilterLevel)apl::LEV_DEBUG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FilterAssoc_1lev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::FilterAssoc *arg1 = (apl::FilterAssoc *) 0 ;
  apl::FilterLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::FilterAssoc **)&jarg1; 
  arg2 = (apl::FilterLevel)jarg2; 
  if (arg1) (arg1)->lev = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FilterAssoc_1lev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::FilterAssoc *arg1 = (apl::FilterAssoc *) 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::FilterAssoc **)&jarg1; 
  result = (apl::FilterLevel) ((arg1)->lev);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FilterAssoc_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  apl::FilterAssoc *arg1 = (apl::FilterAssoc *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::FilterAssoc **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FilterAssoc_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  apl::FilterAssoc *arg1 = (apl::FilterAssoc *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::FilterAssoc **)&jarg1; 
  result = (char) ((arg1)->id);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1FilterAssoc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::FilterAssoc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::FilterAssoc *)new apl::FilterAssoc();
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::FilterAssoc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1FilterAssoc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::FilterAssoc *arg1 = (apl::FilterAssoc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::FilterAssoc **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogTypes_1NUM_1FILTER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = apl::LogTypes::NUM_FILTER;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogTypes_1filters_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::FilterAssoc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::FilterAssoc *)(apl::FilterAssoc *)apl::LogTypes::filters;
  *(apl::FilterAssoc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogTypes_1MASK_1ALL_1LEVELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)apl::LogTypes::MASK_ALL_LEVELS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogTypes_1FilterLevelToMask(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  apl::FilterLevel arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::FilterLevel)jarg1; 
  result = (int)apl::LogTypes::FilterLevelToMask(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogTypes_1GetFilterMask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  jint jresult = 0 ;
  char arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  result = (int)apl::LogTypes::GetFilterMask(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogTypes_1GetFilterMask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)apl::LogTypes::GetFilterMask((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogTypes_1GetLevelString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  apl::FilterLevel arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::FilterLevel)jarg1; 
  result = apl::LogTypes::GetLevelString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogTypes_1GetFilterString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = apl::LogTypes::GetFilterString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1LogTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::LogTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::LogTypes *)new apl::LogTypes();
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::LogTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1LogTypes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::LogTypes *arg1 = (apl::LogTypes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::LogTypes **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1LogEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::LogEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::LogEntry *)new apl::LogEntry();
  *(apl::LogEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1LogEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  apl::FilterLevel arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  apl::LogEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::FilterLevel)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  result = (apl::LogEntry *)new apl::LogEntry(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  *(apl::LogEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetDeviceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  result = (std::string *) &((apl::LogEntry const *)arg1)->GetDeviceName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  result = (std::string *) &((apl::LogEntry const *)arg1)->GetLocation();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  result = (std::string *) &((apl::LogEntry const *)arg1)->GetMessage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetFilterLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  result = (apl::FilterLevel)((apl::LogEntry const *)arg1)->GetFilterLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetTimeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  result = ((apl::LogEntry const *)arg1)->GetTimeString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  result = ((apl::LogEntry const *)arg1)->GetTimeStamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetErrorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  result = (int)((apl::LogEntry const *)arg1)->GetErrorCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1LogString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  bool arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((apl::LogEntry const *)arg1)->LogString(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1LogString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  result = ((apl::LogEntry const *)arg1)->LogString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((apl::LogEntry const *)arg1)->GetValue((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((apl::LogEntry const *)arg1)->GetValue((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1GetValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *arg2 = 0 ;
  boost::int64_t *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(boost::int64_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::int64_t & reference is null");
    return 0;
  } 
  result = (bool)((apl::LogEntry const *)arg1)->GetValue((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1AddValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->AddValue((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1AddValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->AddValue((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LogEntry_1AddValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  std::string *arg2 = 0 ;
  boost::int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::LogEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (boost::int64_t)jarg3; 
  (arg1)->AddValue((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1LogEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::LogEntry *arg1 = (apl::LogEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::LogEntry **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ILogBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::ILogBase *arg1 = (apl::ILogBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::ILogBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ILogBase_1Log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::ILogBase *arg1 = (apl::ILogBase *) 0 ;
  apl::LogEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::ILogBase **)&jarg1; 
  arg2 = *(apl::LogEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::LogEntry const & reference is null");
    return ;
  } 
  (arg1)->Log((apl::LogEntry const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ILogBase_1SetVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  apl::ILogBase *arg1 = (apl::ILogBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::ILogBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->SetVar((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ILogBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::ILogBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::ILogBase *)new SwigDirector_ILogBase(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::ILogBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ILogBase_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::ILogBase *obj = *((apl::ILogBase **)&objarg);
  (void)jcls;
  SwigDirector_ILogBase *director = dynamic_cast<SwigDirector_ILogBase *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ILogBase_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::ILogBase *obj = *((apl::ILogBase **)&objarg);
  SwigDirector_ILogBase *director = dynamic_cast<SwigDirector_ILogBase *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ConvertPhysicalLayerStateToString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  apl::PhysicalLayerState arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::PhysicalLayerState)jarg1; 
  result = apl::ConvertPhysicalLayerStateToString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PhysLayerStateToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  apl::PhysicalLayerState arg2 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  arg2 = (apl::PhysicalLayerState)jarg2; 
  result = (std::ostream *) &apl::operator <<(*arg1,arg2);
  *(std::ostream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1IPhysicalLayerObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::IPhysicalLayerObserver *arg1 = (apl::IPhysicalLayerObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::IPhysicalLayerObserver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IPhysicalLayerObserver_1OnStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::IPhysicalLayerObserver *arg1 = (apl::IPhysicalLayerObserver *) 0 ;
  apl::PhysicalLayerState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::IPhysicalLayerObserver **)&jarg1; 
  arg2 = (apl::PhysicalLayerState)jarg2; 
  (arg1)->OnStateChange(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1IPhysicalLayerObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::IPhysicalLayerObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::IPhysicalLayerObserver *)new SwigDirector_IPhysicalLayerObserver(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::IPhysicalLayerObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IPhysicalLayerObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::IPhysicalLayerObserver *obj = *((apl::IPhysicalLayerObserver **)&objarg);
  (void)jcls;
  SwigDirector_IPhysicalLayerObserver *director = dynamic_cast<SwigDirector_IPhysicalLayerObserver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IPhysicalLayerObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::IPhysicalLayerObserver *obj = *((apl::IPhysicalLayerObserver **)&objarg);
  SwigDirector_IPhysicalLayerObserver *director = dynamic_cast<SwigDirector_IPhysicalLayerObserver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1PhysLayerSettings_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::PhysLayerSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::PhysLayerSettings *)new apl::PhysLayerSettings();
  *(apl::PhysLayerSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1PhysLayerSettings_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  apl::FilterLevel arg1 ;
  apl::millis_t arg2 ;
  apl::IPhysicalLayerObserver *arg3 = (apl::IPhysicalLayerObserver *) 0 ;
  apl::PhysLayerSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (apl::FilterLevel)jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  arg3 = *(apl::IPhysicalLayerObserver **)&jarg3; 
  result = (apl::PhysLayerSettings *)new apl::PhysLayerSettings(arg1,arg2,arg3);
  *(apl::PhysLayerSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1PhysLayerSettings_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  apl::FilterLevel arg1 ;
  apl::millis_t arg2 ;
  apl::PhysLayerSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::FilterLevel)jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  result = (apl::PhysLayerSettings *)new apl::PhysLayerSettings(arg1,arg2);
  *(apl::PhysLayerSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PhysLayerSettings_1LogLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::PhysLayerSettings *arg1 = (apl::PhysLayerSettings *) 0 ;
  apl::FilterLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::PhysLayerSettings **)&jarg1; 
  arg2 = (apl::FilterLevel)jarg2; 
  if (arg1) (arg1)->LogLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PhysLayerSettings_1LogLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::PhysLayerSettings *arg1 = (apl::PhysLayerSettings *) 0 ;
  apl::FilterLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::PhysLayerSettings **)&jarg1; 
  result = (apl::FilterLevel) ((arg1)->LogLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PhysLayerSettings_1RetryTimeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::PhysLayerSettings *arg1 = (apl::PhysLayerSettings *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::PhysLayerSettings **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->RetryTimeout = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PhysLayerSettings_1RetryTimeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::PhysLayerSettings *arg1 = (apl::PhysLayerSettings *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::PhysLayerSettings **)&jarg1; 
  result =  ((arg1)->RetryTimeout);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PhysLayerSettings_1mpObserver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::PhysLayerSettings *arg1 = (apl::PhysLayerSettings *) 0 ;
  apl::IPhysicalLayerObserver *arg2 = (apl::IPhysicalLayerObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::PhysLayerSettings **)&jarg1; 
  arg2 = *(apl::IPhysicalLayerObserver **)&jarg2; 
  if (arg1) (arg1)->mpObserver = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PhysLayerSettings_1mpObserver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::PhysLayerSettings *arg1 = (apl::PhysLayerSettings *) 0 ;
  apl::IPhysicalLayerObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::PhysLayerSettings **)&jarg1; 
  result = (apl::IPhysicalLayerObserver *) ((arg1)->mpObserver);
  *(apl::IPhysicalLayerObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1PhysLayerSettings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::PhysLayerSettings *arg1 = (apl::PhysLayerSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::PhysLayerSettings **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mDevice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mDevice = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mDevice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  result = (std::string *) & ((arg1)->mDevice);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mBaud_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mBaud = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mBaud_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  result = (int) ((arg1)->mBaud);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mDataBits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mDataBits = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mDataBits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  result = (int) ((arg1)->mDataBits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mStopBits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mStopBits = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mStopBits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  result = (int) ((arg1)->mStopBits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mParity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  apl::ParityType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  arg2 = (apl::ParityType)jarg2; 
  if (arg1) (arg1)->mParity = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mParity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  apl::ParityType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  result = (apl::ParityType) ((arg1)->mParity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mFlowType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  apl::FlowType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  arg2 = (apl::FlowType)jarg2; 
  if (arg1) (arg1)->mFlowType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SerialSettings_1mFlowType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  apl::FlowType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  result = (apl::FlowType) ((arg1)->mFlowType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1SerialSettings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::SerialSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::SerialSettings *)new apl::SerialSettings();
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::SerialSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1SerialSettings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::SerialSettings *arg1 = (apl::SerialSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::SerialSettings **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BQ_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::BinaryQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryQuality)apl::BQ_ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BQ_1RESTART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::BinaryQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryQuality)apl::BQ_RESTART;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BQ_1COMM_1LOST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::BinaryQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryQuality)apl::BQ_COMM_LOST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BQ_1REMOTE_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::BinaryQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryQuality)apl::BQ_REMOTE_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BQ_1LOCAL_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::BinaryQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryQuality)apl::BQ_LOCAL_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BQ_1CHATTER_1FILTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::BinaryQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryQuality)apl::BQ_CHATTER_FILTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BQ_1RESERVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::BinaryQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryQuality)apl::BQ_RESERVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BQ_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::BinaryQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryQuality)apl::BQ_STATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AQ_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::AnalogQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::AnalogQuality)apl::AQ_ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AQ_1RESTART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::AnalogQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::AnalogQuality)apl::AQ_RESTART;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AQ_1COMM_1LOST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::AnalogQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::AnalogQuality)apl::AQ_COMM_LOST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AQ_1REMOTE_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::AnalogQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::AnalogQuality)apl::AQ_REMOTE_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AQ_1LOCAL_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::AnalogQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::AnalogQuality)apl::AQ_LOCAL_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AQ_1OVERRANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::AnalogQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::AnalogQuality)apl::AQ_OVERRANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AQ_1REFERENCE_1CHECK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::AnalogQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::AnalogQuality)apl::AQ_REFERENCE_CHECK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AQ_1RESERVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::AnalogQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::AnalogQuality)apl::AQ_RESERVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CQ_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CounterQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CounterQuality)apl::CQ_ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CQ_1RESTART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CounterQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CounterQuality)apl::CQ_RESTART;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CQ_1COMM_1LOST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CounterQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CounterQuality)apl::CQ_COMM_LOST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CQ_1REMOTE_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CounterQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CounterQuality)apl::CQ_REMOTE_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CQ_1LOCAL_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CounterQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CounterQuality)apl::CQ_LOCAL_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CQ_1ROLLOVER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CounterQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CounterQuality)apl::CQ_ROLLOVER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CQ_1DISCONTINUITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CounterQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CounterQuality)apl::CQ_DISCONTINUITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CQ_1RESERVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CounterQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CounterQuality)apl::CQ_RESERVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_TQ_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlQuality)apl::TQ_ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_TQ_1RESTART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlQuality)apl::TQ_RESTART;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_TQ_1COMM_1LOST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlQuality)apl::TQ_COMM_LOST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_TQ_1REMOTE_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlQuality)apl::TQ_REMOTE_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_TQ_1LOCAL_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlQuality)apl::TQ_LOCAL_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_TQ_1RESERVED_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlQuality)apl::TQ_RESERVED_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_TQ_1RESERVED_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlQuality)apl::TQ_RESERVED_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_TQ_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlQuality)apl::TQ_STATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PQ_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::SetpointQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointQuality)apl::PQ_ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PQ_1RESTART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::SetpointQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointQuality)apl::PQ_RESTART;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PQ_1COMM_1LOST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::SetpointQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointQuality)apl::PQ_COMM_LOST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PQ_1REMOTE_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::SetpointQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointQuality)apl::PQ_REMOTE_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PQ_1RESERVED_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::SetpointQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointQuality)apl::PQ_RESERVED_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PQ_1RESERVED_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::SetpointQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointQuality)apl::PQ_RESERVED_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PQ_1RESERVED_13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::SetpointQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointQuality)apl::PQ_RESERVED_3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PQ_1RESERVED_14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::SetpointQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointQuality)apl::PQ_RESERVED_4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VQ_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::VtoQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::VtoQuality)apl::VQ_ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VQ_1RESTART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::VtoQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::VtoQuality)apl::VQ_RESTART;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VQ_1COMM_1LOST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::VtoQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::VtoQuality)apl::VQ_COMM_LOST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VQ_1REMOTE_1FORCED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::VtoQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::VtoQuality)apl::VQ_REMOTE_FORCED_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VQ_1RESERVED_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::VtoQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::VtoQuality)apl::VQ_RESERVED_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VQ_1RESERVED_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::VtoQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::VtoQuality)apl::VQ_RESERVED_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VQ_1RESERVED_13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::VtoQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::VtoQuality)apl::VQ_RESERVED_3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VQ_1RESERVED_14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::VtoQuality result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::VtoQuality)apl::VQ_RESERVED_4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1SUCCESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_SUCCESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_TIMEOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1NO_1SELECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_NO_SELECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1FORMAT_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_FORMAT_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1NOT_1SUPPORTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_NOT_SUPPORTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1ALREADY_1ACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_ALREADY_ACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1HARDWARE_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_HARDWARE_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1LOCAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_LOCAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1TOO_1MANY_1OPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_TOO_MANY_OPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1NOT_1AUTHORIZED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_NOT_AUTHORIZED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CS_1UNDEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandStatus)apl::CS_UNDEFINED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ByteToCommandStatus(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jint jresult = 0 ;
  boost::uint8_t arg1 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint8_t)jarg1; 
  result = (apl::CommandStatus)apl::ByteToCommandStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ToString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  apl::CommandStatus arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::CommandStatus)jarg1; 
  result = apl::ToString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CC_1NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlCode)apl::CC_NULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CC_1PULSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlCode)apl::CC_PULSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CC_1LATCH_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlCode)apl::CC_LATCH_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CC_1LATCH_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlCode)apl::CC_LATCH_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CC_1PULSE_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlCode)apl::CC_PULSE_CLOSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CC_1PULSE_1TRIP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlCode)apl::CC_PULSE_TRIP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CC_1UNDEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlCode)apl::CC_UNDEFINED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ByteToControlCode(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jint jresult = 0 ;
  boost::uint8_t arg1 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint8_t)jarg1; 
  result = (apl::ControlCode)apl::ByteToControlCode(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ToString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  apl::ControlCode arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::ControlCode)jarg1; 
  result = apl::ToString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ToString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  apl::CommandTypes arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::CommandTypes)jarg1; 
  result = apl::ToString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CommandRequest_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::CommandRequest *arg1 = (apl::CommandRequest *) 0 ;
  apl::CommandTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::CommandRequest **)&jarg1; 
  result = (apl::CommandTypes)((apl::CommandRequest const *)arg1)->GetType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CommandRequest_1mStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::CommandRequest *arg1 = (apl::CommandRequest *) 0 ;
  apl::CommandStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::CommandRequest **)&jarg1; 
  arg2 = (apl::CommandStatus)jarg2; 
  if (arg1) (arg1)->mStatus = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CommandRequest_1mStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::CommandRequest *arg1 = (apl::CommandRequest *) 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::CommandRequest **)&jarg1; 
  result = (apl::CommandStatus) ((arg1)->mStatus);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1CommandRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::CommandRequest *arg1 = (apl::CommandRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::CommandRequest **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1BinaryOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::BinaryOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::BinaryOutput *)new apl::BinaryOutput();
  *(apl::BinaryOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1BinaryOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  apl::ControlCode arg1 ;
  boost::uint8_t arg2 ;
  boost::uint32_t arg3 ;
  boost::uint32_t arg4 ;
  apl::BinaryOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::ControlCode)jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  arg3 = (boost::uint32_t)jarg3; 
  arg4 = (boost::uint32_t)jarg4; 
  result = (apl::BinaryOutput *)new apl::BinaryOutput(arg1,arg2,arg3,arg4);
  *(apl::BinaryOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1BinaryOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  apl::ControlCode arg1 ;
  boost::uint8_t arg2 ;
  boost::uint32_t arg3 ;
  apl::BinaryOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::ControlCode)jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  arg3 = (boost::uint32_t)jarg3; 
  result = (apl::BinaryOutput *)new apl::BinaryOutput(arg1,arg2,arg3);
  *(apl::BinaryOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1BinaryOutput_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  apl::ControlCode arg1 ;
  boost::uint8_t arg2 ;
  apl::BinaryOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::ControlCode)jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  result = (apl::BinaryOutput *)new apl::BinaryOutput(arg1,arg2);
  *(apl::BinaryOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1BinaryOutput_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  apl::ControlCode arg1 ;
  apl::BinaryOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::ControlCode)jarg1; 
  result = (apl::BinaryOutput *)new apl::BinaryOutput(arg1);
  *(apl::BinaryOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1GetCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  apl::ControlCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  result = (apl::ControlCode)((apl::BinaryOutput const *)arg1)->GetCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1mRawCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->mRawCode = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1mRawCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  result =  ((arg1)->mRawCode);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1mCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->mCount = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1mCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  result =  ((arg1)->mCount);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1mOnTimeMS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->mOnTimeMS = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1mOnTimeMS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  result =  ((arg1)->mOnTimeMS);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1mOffTimeMS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->mOffTimeMS = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1mOffTimeMS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  result =  ((arg1)->mOffTimeMS);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  result = ((apl::BinaryOutput const *)arg1)->ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1boEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  apl::BinaryOutput *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  arg2 = *(apl::BinaryOutput **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::BinaryOutput const & reference is null");
    return 0;
  } 
  result = (bool)((apl::BinaryOutput const *)arg1)->operator ==((apl::BinaryOutput const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1EnumType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum apl::CommandTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (enum apl::CommandTypes)apl::BinaryOutput::EnumType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1BinaryOutput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::BinaryOutput *arg1 = (apl::BinaryOutput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::BinaryOutput **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Setpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  boost::int16_t arg1 ;
  apl::Setpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::int16_t)jarg1; 
  result = (apl::Setpoint *)new apl::Setpoint(arg1);
  *(apl::Setpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Setpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  boost::int32_t arg1 ;
  apl::Setpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::int32_t)jarg1; 
  result = (apl::Setpoint *)new apl::Setpoint(arg1);
  *(apl::Setpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Setpoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  apl::Setpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (apl::Setpoint *)new apl::Setpoint(arg1);
  *(apl::Setpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Setpoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::Setpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::Setpoint *)new apl::Setpoint();
  *(apl::Setpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  result = ((apl::Setpoint const *)arg1)->ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1stEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  apl::Setpoint *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  arg2 = *(apl::Setpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Setpoint const & reference is null");
    return 0;
  } 
  result = (bool)((apl::Setpoint const *)arg1)->operator ==((apl::Setpoint const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1EnumType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum apl::CommandTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (enum apl::CommandTypes)apl::Setpoint::EnumType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1GetIntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  boost::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  result = ((apl::Setpoint const *)arg1)->GetIntValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  result = (double)((apl::Setpoint const *)arg1)->GetValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1SetValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1SetValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  boost::int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  arg2 = (boost::int32_t)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1GetOptimalEncodingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  apl::SetpointEncodingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  result = (apl::SetpointEncodingType)((apl::Setpoint const *)arg1)->GetOptimalEncodingType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1GetEncodingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  apl::SetpointEncodingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  result = (apl::SetpointEncodingType)((apl::Setpoint const *)arg1)->GetEncodingType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1SetEncodingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  apl::SetpointEncodingType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Setpoint **)&jarg1; 
  arg2 = (apl::SetpointEncodingType)jarg2; 
  (arg1)->SetEncodingType(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1Setpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::Setpoint *arg1 = (apl::Setpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::Setpoint **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1CommandResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::CommandResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::CommandResponse *)new apl::CommandResponse();
  *(apl::CommandResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1CommandResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  apl::CommandStatus arg1 ;
  apl::CommandResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::CommandStatus)jarg1; 
  result = (apl::CommandResponse *)new apl::CommandResponse(arg1);
  *(apl::CommandResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CommandResponse_1mResult_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::CommandResponse *arg1 = (apl::CommandResponse *) 0 ;
  apl::CommandStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::CommandResponse **)&jarg1; 
  arg2 = (apl::CommandStatus)jarg2; 
  if (arg1) (arg1)->mResult = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_CommandResponse_1mResult_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::CommandResponse *arg1 = (apl::CommandResponse *) 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::CommandResponse **)&jarg1; 
  result = (apl::CommandStatus) ((arg1)->mResult);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1CommandResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::CommandResponse *arg1 = (apl::CommandResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::CommandResponse **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_GetDataTypeName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  apl::DataTypes arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::DataTypes)jarg1; 
  result = apl::GetDataTypeName(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1DataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::DataPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  apl::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  result = (apl::DataTypes)((apl::DataPoint const *)arg1)->GetType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1GetTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  apl::TimeStamp_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  result = ((apl::DataPoint const *)arg1)->GetTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1GetQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  result = ((apl::DataPoint const *)arg1)->GetQuality();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1GetQualitySwigExplicitDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  result = ((apl::DataPoint const *)arg1)->apl::DataPoint::GetQuality();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1CheckQualityBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  boost::uint8_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  result = (bool)((apl::DataPoint const *)arg1)->CheckQualityBit(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1SetQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  (arg1)->SetQuality(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1SetQualitySwigExplicitDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  (arg1)->apl::DataPoint::SetQuality(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1SetTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  apl::TimeStamp_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  arg2 = (apl::TimeStamp_t)jarg2; 
  (arg1)->SetTime(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1SetToNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  (arg1)->SetToNow();
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  result = ((apl::DataPoint const *)arg1)->ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1GetClassMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  result = ((apl::DataPoint const *)arg1)->GetClassMask();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1SetClassMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetClassMask(arg2);
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1GetGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  result = (int)((apl::DataPoint const *)arg1)->GetGroup();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1SetGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGroup(arg2);
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1GetVariation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  result = (int)((apl::DataPoint const *)arg1)->GetVariation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1SetVariation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::DataPoint *arg1 = (apl::DataPoint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::DataPoint **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetVariation(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DataPoint(JNIEnv *jenv, jclass jcls, jshort jarg1, jint jarg2) {
  jlong jresult = 0 ;
  boost::uint8_t arg1 ;
  apl::DataTypes arg2 ;
  apl::DataPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint8_t)jarg1; 
  arg2 = (apl::DataTypes)jarg2; 
  result = (apl::DataPoint *)new SwigDirector_DataPoint(jenv,arg1,arg2);
  *(apl::DataPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::DataPoint *obj = *((apl::DataPoint **)&objarg);
  (void)jcls;
  SwigDirector_DataPoint *director = dynamic_cast<SwigDirector_DataPoint *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DataPoint_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::DataPoint *obj = *((apl::DataPoint **)&objarg);
  SwigDirector_DataPoint *director = dynamic_cast<SwigDirector_DataPoint *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  result = (bool)((apl::BoolDataPoint const *)arg1)->GetValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1GetQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  result = ((apl::BoolDataPoint const *)arg1)->GetQuality();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1GetQualitySwigExplicitBoolDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  result = ((apl::BoolDataPoint const *)arg1)->apl::BoolDataPoint::GetQuality();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1SetQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  (arg1)->SetQuality(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1SetQualitySwigExplicitBoolDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  (arg1)->apl::BoolDataPoint::SetQuality(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1SetQualityValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  (arg1)->SetQualityValue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1ShouldGenerateEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  apl::BoolDataPoint *arg2 = 0 ;
  double arg3 ;
  boost::uint32_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  arg2 = *(apl::BoolDataPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::BoolDataPoint const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (boost::uint32_t)jarg4; 
  result = (bool)((apl::BoolDataPoint const *)arg1)->ShouldGenerateEvent((apl::BoolDataPoint const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  result = ((apl::BoolDataPoint const *)arg1)->ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1ToStringSwigExplicitBoolDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  result = ((apl::BoolDataPoint const *)arg1)->apl::BoolDataPoint::ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1bdpEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  apl::BoolDataPoint *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  arg2 = *(apl::BoolDataPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::BoolDataPoint const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator ==((apl::BoolDataPoint const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1BoolDataPoint(JNIEnv *jenv, jclass jcls, jshort jarg1, jint jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  boost::uint8_t arg1 ;
  apl::DataTypes arg2 ;
  boost::uint8_t arg3 ;
  apl::BoolDataPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint8_t)jarg1; 
  arg2 = (apl::DataTypes)jarg2; 
  arg3 = (boost::uint8_t)jarg3; 
  result = (apl::BoolDataPoint *)new SwigDirector_BoolDataPoint(jenv,arg1,arg2,arg3);
  *(apl::BoolDataPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1BoolDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::BoolDataPoint *arg1 = (apl::BoolDataPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::BoolDataPoint **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::BoolDataPoint *obj = *((apl::BoolDataPoint **)&objarg);
  (void)jcls;
  SwigDirector_BoolDataPoint *director = dynamic_cast<SwigDirector_BoolDataPoint *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::BoolDataPoint *obj = *((apl::BoolDataPoint **)&objarg);
  SwigDirector_BoolDataPoint *director = dynamic_cast<SwigDirector_BoolDataPoint *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  apl::TypedDataPoint< double > *arg1 = (apl::TypedDataPoint< double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::TypedDataPoint< double > **)&jarg1; 
  result = (double)((apl::TypedDataPoint< double > const *)arg1)->GetValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  apl::TypedDataPoint< double > *arg1 = (apl::TypedDataPoint< double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::TypedDataPoint< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1ShouldGenerateEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  apl::TypedDataPoint< double > *arg1 = (apl::TypedDataPoint< double > *) 0 ;
  apl::TypedDataPoint< double > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::TypedDataPoint< double > **)&jarg1; 
  arg2 = *(apl::TypedDataPoint< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::TypedDataPoint< double > const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)((apl::TypedDataPoint< double > const *)arg1)->ShouldGenerateEvent((apl::TypedDataPoint< double > const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1MAX_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)apl::TypedDataPoint< double >::MAX_VALUE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1MIN_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)apl::TypedDataPoint< double >::MIN_VALUE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::TypedDataPoint< double > *arg1 = (apl::TypedDataPoint< double > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::TypedDataPoint< double > **)&jarg1; 
  result = ((apl::TypedDataPoint< double > const *)arg1)->ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1ToStringSwigExplicitDoublePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::TypedDataPoint< double > *arg1 = (apl::TypedDataPoint< double > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::TypedDataPoint< double > **)&jarg1; 
  result = ((apl::TypedDataPoint< double > const *)arg1)->apl::TypedDataPoint< double >::ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1tdpEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  apl::TypedDataPoint< double > *arg1 = (apl::TypedDataPoint< double > *) 0 ;
  apl::TypedDataPoint< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::TypedDataPoint< double > **)&jarg1; 
  arg2 = *(apl::TypedDataPoint< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::TypedDataPoint< double > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator ==((apl::TypedDataPoint< double > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DoublePoint(JNIEnv *jenv, jclass jcls, jshort jarg1, jint jarg2) {
  jlong jresult = 0 ;
  boost::uint8_t arg1 ;
  apl::DataTypes arg2 ;
  apl::TypedDataPoint< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint8_t)jarg1; 
  arg2 = (apl::DataTypes)jarg2; 
  result = (apl::TypedDataPoint< double > *)new SwigDirector_DoublePoint(jenv,arg1,arg2);
  *(apl::TypedDataPoint< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1DoublePoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::TypedDataPoint< double > *arg1 = (apl::TypedDataPoint< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::TypedDataPoint< double > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::TypedDataPoint< double > *obj = *((apl::TypedDataPoint< double > **)&objarg);
  (void)jcls;
  SwigDirector_DoublePoint *director = dynamic_cast<SwigDirector_DoublePoint *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::TypedDataPoint< double > *obj = *((apl::TypedDataPoint< double > **)&objarg);
  SwigDirector_DoublePoint *director = dynamic_cast<SwigDirector_DoublePoint *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::TypedDataPoint< boost::uint32_t > *arg1 = (apl::TypedDataPoint< boost::uint32_t > *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg1; 
  result = ((apl::TypedDataPoint< boost::uint32_t > const *)arg1)->GetValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::TypedDataPoint< boost::uint32_t > *arg1 = (apl::TypedDataPoint< boost::uint32_t > *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1ShouldGenerateEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  apl::TypedDataPoint< boost::uint32_t > *arg1 = (apl::TypedDataPoint< boost::uint32_t > *) 0 ;
  apl::TypedDataPoint< boost::uint32_t > *arg2 = 0 ;
  double arg3 ;
  boost::uint32_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg1; 
  arg2 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::TypedDataPoint< boost::uint32_t > const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (boost::uint32_t)jarg4; 
  result = (bool)((apl::TypedDataPoint< boost::uint32_t > const *)arg1)->ShouldGenerateEvent((apl::TypedDataPoint< boost::uint32_t > const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1MAX_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (boost::uint32_t)apl::TypedDataPoint< boost::uint32_t >::MAX_VALUE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1MIN_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (boost::uint32_t)apl::TypedDataPoint< boost::uint32_t >::MIN_VALUE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::TypedDataPoint< boost::uint32_t > *arg1 = (apl::TypedDataPoint< boost::uint32_t > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg1; 
  result = ((apl::TypedDataPoint< boost::uint32_t > const *)arg1)->ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1ToStringSwigExplicitUnsignedPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::TypedDataPoint< boost::uint32_t > *arg1 = (apl::TypedDataPoint< boost::uint32_t > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg1; 
  result = ((apl::TypedDataPoint< boost::uint32_t > const *)arg1)->apl::TypedDataPoint< boost::uint32_t >::ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1tdpEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  apl::TypedDataPoint< boost::uint32_t > *arg1 = (apl::TypedDataPoint< boost::uint32_t > *) 0 ;
  apl::TypedDataPoint< boost::uint32_t > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg1; 
  arg2 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::TypedDataPoint< boost::uint32_t > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator ==((apl::TypedDataPoint< boost::uint32_t > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1UnsignedPoint(JNIEnv *jenv, jclass jcls, jshort jarg1, jint jarg2) {
  jlong jresult = 0 ;
  boost::uint8_t arg1 ;
  apl::DataTypes arg2 ;
  apl::TypedDataPoint< boost::uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint8_t)jarg1; 
  arg2 = (apl::DataTypes)jarg2; 
  result = (apl::TypedDataPoint< boost::uint32_t > *)new SwigDirector_UnsignedPoint(jenv,arg1,arg2);
  *(apl::TypedDataPoint< boost::uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1UnsignedPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::TypedDataPoint< boost::uint32_t > *arg1 = (apl::TypedDataPoint< boost::uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::TypedDataPoint< boost::uint32_t > *obj = *((apl::TypedDataPoint< boost::uint32_t > **)&objarg);
  (void)jcls;
  SwigDirector_UnsignedPoint *director = dynamic_cast<SwigDirector_UnsignedPoint *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::TypedDataPoint< boost::uint32_t > *obj = *((apl::TypedDataPoint< boost::uint32_t > **)&objarg);
  SwigDirector_UnsignedPoint *director = dynamic_cast<SwigDirector_UnsignedPoint *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Binary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  boost::uint8_t arg2 ;
  apl::Binary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (boost::uint8_t)jarg2; 
  result = (apl::Binary *)new SwigDirector_Binary(jenv,arg1,arg2);
  *(apl::Binary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Binary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  apl::Binary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (apl::Binary *)new SwigDirector_Binary(jenv,arg1);
  *(apl::Binary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Binary_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::Binary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::Binary *)new SwigDirector_Binary(jenv);
  *(apl::Binary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Binary_1MeasEnum_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum apl::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (enum apl::DataTypes)apl::Binary::MeasEnum;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Binary_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)apl::Binary::ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Binary_1get_1binary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::Binary *arg1 = (apl::Binary *) 0 ;
  apl::Binary::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Binary **)&jarg1; 
  result = (apl::Binary::ValueType)((apl::Binary const *)arg1)->operator apl::Binary::ValueType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Binary_1set_1binary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  apl::Binary *arg1 = (apl::Binary *) 0 ;
  apl::Binary::ValueType arg2 ;
  apl::Binary::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Binary **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (apl::Binary::ValueType)(arg1)->operator =(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1Binary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::Binary *arg1 = (apl::Binary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::Binary **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Binary_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::Binary *obj = *((apl::Binary **)&objarg);
  (void)jcls;
  SwigDirector_Binary *director = dynamic_cast<SwigDirector_Binary *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Binary_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::Binary *obj = *((apl::Binary **)&objarg);
  SwigDirector_Binary *director = dynamic_cast<SwigDirector_Binary *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ControlStatus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  boost::uint8_t arg2 ;
  apl::ControlStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (boost::uint8_t)jarg2; 
  result = (apl::ControlStatus *)new SwigDirector_ControlStatus(jenv,arg1,arg2);
  *(apl::ControlStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ControlStatus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  apl::ControlStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (apl::ControlStatus *)new SwigDirector_ControlStatus(jenv,arg1);
  *(apl::ControlStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ControlStatus_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::ControlStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ControlStatus *)new SwigDirector_ControlStatus(jenv);
  *(apl::ControlStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlStatus_1MeasEnum_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum apl::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (enum apl::DataTypes)apl::ControlStatus::MeasEnum;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlStatus_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)apl::ControlStatus::ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlStatus_1get_1controlstatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::ControlStatus *arg1 = (apl::ControlStatus *) 0 ;
  apl::ControlStatus::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::ControlStatus **)&jarg1; 
  result = (apl::ControlStatus::ValueType)((apl::ControlStatus const *)arg1)->operator apl::ControlStatus::ValueType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlStatus_1set_1controlstatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  apl::ControlStatus *arg1 = (apl::ControlStatus *) 0 ;
  apl::ControlStatus::ValueType arg2 ;
  apl::ControlStatus::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::ControlStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (apl::ControlStatus::ValueType)(arg1)->operator =(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ControlStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::ControlStatus *arg1 = (apl::ControlStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::ControlStatus **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlStatus_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::ControlStatus *obj = *((apl::ControlStatus **)&objarg);
  (void)jcls;
  SwigDirector_ControlStatus *director = dynamic_cast<SwigDirector_ControlStatus *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlStatus_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::ControlStatus *obj = *((apl::ControlStatus **)&objarg);
  SwigDirector_ControlStatus *director = dynamic_cast<SwigDirector_ControlStatus *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Analog_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::Analog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::Analog *)new SwigDirector_Analog(jenv);
  *(apl::Analog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Analog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  boost::uint8_t arg2 ;
  apl::Analog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  result = (apl::Analog *)new SwigDirector_Analog(jenv,arg1,arg2);
  *(apl::Analog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Analog_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  apl::Analog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (apl::Analog *)new SwigDirector_Analog(jenv,arg1);
  *(apl::Analog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Analog_1MeasEnum_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum apl::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (enum apl::DataTypes)apl::Analog::MeasEnum;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Analog_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)apl::Analog::ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Analog_1get_1analog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  apl::Analog *arg1 = (apl::Analog *) 0 ;
  apl::Analog::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Analog **)&jarg1; 
  result = (apl::Analog::ValueType)((apl::Analog const *)arg1)->operator apl::Analog::ValueType();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Analog_1set_1analog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  apl::Analog *arg1 = (apl::Analog *) 0 ;
  apl::Analog::ValueType arg2 ;
  apl::Analog::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Analog **)&jarg1; 
  arg2 = (apl::Analog::ValueType)jarg2; 
  result = (apl::Analog::ValueType)(arg1)->operator =(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1Analog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::Analog *arg1 = (apl::Analog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::Analog **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Analog_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::Analog *obj = *((apl::Analog **)&objarg);
  (void)jcls;
  SwigDirector_Analog *director = dynamic_cast<SwigDirector_Analog *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Analog_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::Analog *obj = *((apl::Analog **)&objarg);
  SwigDirector_Analog *director = dynamic_cast<SwigDirector_Analog *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Counter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::Counter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::Counter *)new SwigDirector_Counter(jenv);
  *(apl::Counter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Counter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  boost::uint32_t arg1 ;
  boost::uint8_t arg2 ;
  apl::Counter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint32_t)jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  result = (apl::Counter *)new SwigDirector_Counter(jenv,arg1,arg2);
  *(apl::Counter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Counter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::uint32_t arg1 ;
  apl::Counter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint32_t)jarg1; 
  result = (apl::Counter *)new SwigDirector_Counter(jenv,arg1);
  *(apl::Counter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Counter_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)apl::Counter::ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Counter_1MeasEnum_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum apl::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (enum apl::DataTypes)apl::Counter::MeasEnum;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Counter_1get_1counter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  apl::Counter *arg1 = (apl::Counter *) 0 ;
  apl::Counter::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Counter **)&jarg1; 
  result = ((apl::Counter const *)arg1)->operator apl::Counter::ValueType();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Counter_1set_1counter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jshort jresult = 0 ;
  apl::Counter *arg1 = (apl::Counter *) 0 ;
  apl::Counter::ValueType arg2 ;
  apl::Counter::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Counter **)&jarg1; 
  arg2 = (apl::Counter::ValueType)jarg2; 
  result = (arg1)->operator =(arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1Counter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::Counter *arg1 = (apl::Counter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::Counter **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Counter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::Counter *obj = *((apl::Counter **)&objarg);
  (void)jcls;
  SwigDirector_Counter *director = dynamic_cast<SwigDirector_Counter *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Counter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::Counter *obj = *((apl::Counter **)&objarg);
  SwigDirector_Counter *director = dynamic_cast<SwigDirector_Counter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1SetpointStatus_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::SetpointStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::SetpointStatus *)new SwigDirector_SetpointStatus(jenv);
  *(apl::SetpointStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1SetpointStatus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  boost::uint8_t arg2 ;
  apl::SetpointStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  result = (apl::SetpointStatus *)new SwigDirector_SetpointStatus(jenv,arg1,arg2);
  *(apl::SetpointStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1SetpointStatus_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  apl::SetpointStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (apl::SetpointStatus *)new SwigDirector_SetpointStatus(jenv,arg1);
  *(apl::SetpointStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SetpointStatus_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)apl::SetpointStatus::ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SetpointStatus_1MeasEnum_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum apl::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (enum apl::DataTypes)apl::SetpointStatus::MeasEnum;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SetpointStatus_1get_1setpointstatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  apl::SetpointStatus *arg1 = (apl::SetpointStatus *) 0 ;
  apl::SetpointStatus::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SetpointStatus **)&jarg1; 
  result = (apl::SetpointStatus::ValueType)((apl::SetpointStatus const *)arg1)->operator apl::SetpointStatus::ValueType();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SetpointStatus_1set_1setpointstatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  apl::SetpointStatus *arg1 = (apl::SetpointStatus *) 0 ;
  apl::SetpointStatus::ValueType arg2 ;
  apl::SetpointStatus::ValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::SetpointStatus **)&jarg1; 
  arg2 = (apl::SetpointStatus::ValueType)jarg2; 
  result = (apl::SetpointStatus::ValueType)(arg1)->operator =(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1SetpointStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::SetpointStatus *arg1 = (apl::SetpointStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::SetpointStatus **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SetpointStatus_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::SetpointStatus *obj = *((apl::SetpointStatus **)&objarg);
  (void)jcls;
  SwigDirector_SetpointStatus *director = dynamic_cast<SwigDirector_SetpointStatus *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SetpointStatus_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::SetpointStatus *obj = *((apl::SetpointStatus **)&objarg);
  SwigDirector_SetpointStatus *director = dynamic_cast<SwigDirector_SetpointStatus *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ITransactable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::ITransactable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::ITransactable *)new SwigDirector_ITransactable(jenv);
  *(apl::ITransactable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ITransactable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::ITransactable *arg1 = (apl::ITransactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::ITransactable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ITransactable_1Start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  apl::ITransactable *arg1 = (apl::ITransactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::ITransactable **)&jarg1; 
  (arg1)->Start();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ITransactable_1End(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  apl::ITransactable *arg1 = (apl::ITransactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::ITransactable **)&jarg1; 
  (arg1)->End();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ITransactable_1_1Start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  apl::ITransactable *arg1 = (apl::ITransactable *) 0 ;
  SwigDirector_ITransactable *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::ITransactable **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ITransactable *>(arg1);
  (darg)->_Start();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ITransactable_1_1End(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  apl::ITransactable *arg1 = (apl::ITransactable *) 0 ;
  SwigDirector_ITransactable *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::ITransactable **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ITransactable *>(arg1);
  (darg)->_End();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ITransactable_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::ITransactable *obj = *((apl::ITransactable **)&objarg);
  (void)jcls;
  SwigDirector_ITransactable *director = dynamic_cast<SwigDirector_ITransactable *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ITransactable_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::ITransactable *obj = *((apl::ITransactable **)&objarg);
  SwigDirector_ITransactable *director = dynamic_cast<SwigDirector_ITransactable *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Transaction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::ITransactable *arg1 = 0 ;
  apl::Transaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::ITransactable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::ITransactable & reference is null");
    return 0;
  } 
  result = (apl::Transaction *)new apl::Transaction(*arg1);
  *(apl::Transaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1Transaction_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::Transaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::Transaction *)new apl::Transaction();
  *(apl::Transaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Transaction_1Start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::Transaction *arg1 = (apl::Transaction *) 0 ;
  apl::ITransactable *arg2 = (apl::ITransactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::Transaction **)&jarg1; 
  arg2 = *(apl::ITransactable **)&jarg2; 
  (arg1)->Start(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Transaction_1End(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  apl::Transaction *arg1 = (apl::Transaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::Transaction **)&jarg1; 
  (arg1)->End();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1Transaction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::Transaction *arg1 = (apl::Transaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::Transaction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1IDataObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1Update_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::Binary *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::Binary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Binary const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->Update((apl::Binary const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1Update_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::Analog *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::Analog **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Analog const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->Update((apl::Analog const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1Update_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::Counter *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::Counter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Counter const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->Update((apl::Counter const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1Update_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::ControlStatus *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::ControlStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::ControlStatus const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->Update((apl::ControlStatus const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1Update_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::SetpointStatus *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::SetpointStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::SetpointStatus const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->Update((apl::SetpointStatus const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1_1Update_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::Binary *arg2 = 0 ;
  size_t arg3 ;
  SwigDirector_IDataObserver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::Binary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Binary const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  darg = dynamic_cast<SwigDirector_IDataObserver *>(arg1);
  (darg)->_Update((apl::Binary const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1_1Update_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::Analog *arg2 = 0 ;
  size_t arg3 ;
  SwigDirector_IDataObserver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::Analog **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Analog const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  darg = dynamic_cast<SwigDirector_IDataObserver *>(arg1);
  (darg)->_Update((apl::Analog const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1_1Update_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::Counter *arg2 = 0 ;
  size_t arg3 ;
  SwigDirector_IDataObserver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::Counter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Counter const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  darg = dynamic_cast<SwigDirector_IDataObserver *>(arg1);
  (darg)->_Update((apl::Counter const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1_1Update_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::ControlStatus *arg2 = 0 ;
  size_t arg3 ;
  SwigDirector_IDataObserver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::ControlStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::ControlStatus const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  darg = dynamic_cast<SwigDirector_IDataObserver *>(arg1);
  (darg)->_Update((apl::ControlStatus const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1_1Update_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  apl::IDataObserver *arg1 = (apl::IDataObserver *) 0 ;
  apl::SetpointStatus *arg2 = 0 ;
  size_t arg3 ;
  SwigDirector_IDataObserver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IDataObserver **)&jarg1; 
  arg2 = *(apl::SetpointStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::SetpointStatus const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  darg = dynamic_cast<SwigDirector_IDataObserver *>(arg1);
  (darg)->_Update((apl::SetpointStatus const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1IDataObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::IDataObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::IDataObserver *)new SwigDirector_IDataObserver(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::IDataObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::IDataObserver *obj = *((apl::IDataObserver **)&objarg);
  (void)jcls;
  SwigDirector_IDataObserver *director = dynamic_cast<SwigDirector_IDataObserver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::IDataObserver *obj = *((apl::IDataObserver **)&objarg);
  SwigDirector_IDataObserver *director = dynamic_cast<SwigDirector_IDataObserver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1IResponseAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::IResponseAcceptor *arg1 = (apl::IResponseAcceptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::IResponseAcceptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IResponseAcceptor_1AcceptResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  apl::IResponseAcceptor *arg1 = (apl::IResponseAcceptor *) 0 ;
  apl::CommandResponse *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::IResponseAcceptor **)&jarg1; 
  arg2 = *(apl::CommandResponse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::CommandResponse const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->AcceptResponse((apl::CommandResponse const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1IResponseAcceptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::IResponseAcceptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::IResponseAcceptor *)new SwigDirector_IResponseAcceptor(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::IResponseAcceptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IResponseAcceptor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::IResponseAcceptor *obj = *((apl::IResponseAcceptor **)&objarg);
  (void)jcls;
  SwigDirector_IResponseAcceptor *director = dynamic_cast<SwigDirector_IResponseAcceptor *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IResponseAcceptor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::IResponseAcceptor *obj = *((apl::IResponseAcceptor **)&objarg);
  SwigDirector_IResponseAcceptor *director = dynamic_cast<SwigDirector_IResponseAcceptor *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ICommandAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::ICommandAcceptor *arg1 = (apl::ICommandAcceptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::ICommandAcceptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandAcceptor_1AcceptCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  apl::ICommandAcceptor *arg1 = (apl::ICommandAcceptor *) 0 ;
  apl::BinaryOutput *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  apl::IResponseAcceptor *arg5 = (apl::IResponseAcceptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(apl::ICommandAcceptor **)&jarg1; 
  arg2 = *(apl::BinaryOutput **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::BinaryOutput const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(apl::IResponseAcceptor **)&jarg5; 
  (arg1)->AcceptCommand((apl::BinaryOutput const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandAcceptor_1AcceptCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  apl::ICommandAcceptor *arg1 = (apl::ICommandAcceptor *) 0 ;
  apl::Setpoint *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  apl::IResponseAcceptor *arg5 = (apl::IResponseAcceptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(apl::ICommandAcceptor **)&jarg1; 
  arg2 = *(apl::Setpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Setpoint const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(apl::IResponseAcceptor **)&jarg5; 
  (arg1)->AcceptCommand((apl::Setpoint const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ICommandAcceptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::ICommandAcceptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::ICommandAcceptor *)new SwigDirector_ICommandAcceptor(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::ICommandAcceptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandAcceptor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::ICommandAcceptor *obj = *((apl::ICommandAcceptor **)&objarg);
  (void)jcls;
  SwigDirector_ICommandAcceptor *director = dynamic_cast<SwigDirector_ICommandAcceptor *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandAcceptor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::ICommandAcceptor *obj = *((apl::ICommandAcceptor **)&objarg);
  SwigDirector_ICommandAcceptor *director = dynamic_cast<SwigDirector_ICommandAcceptor *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ICommandHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::ICommandHandler *arg1 = (apl::ICommandHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::ICommandHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandHandler_1HandleControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  apl::ICommandHandler *arg1 = (apl::ICommandHandler *) 0 ;
  apl::BinaryOutput *arg2 = 0 ;
  size_t arg3 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::ICommandHandler **)&jarg1; 
  arg2 = *(apl::BinaryOutput **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::BinaryOutput & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (apl::CommandStatus)(arg1)->HandleControl(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandHandler_1HandleControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  apl::ICommandHandler *arg1 = (apl::ICommandHandler *) 0 ;
  apl::Setpoint *arg2 = 0 ;
  size_t arg3 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::ICommandHandler **)&jarg1; 
  arg2 = *(apl::Setpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Setpoint & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (apl::CommandStatus)(arg1)->HandleControl(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ICommandHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::ICommandHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::ICommandHandler *)new SwigDirector_ICommandHandler(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::ICommandHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::ICommandHandler *obj = *((apl::ICommandHandler **)&objarg);
  (void)jcls;
  SwigDirector_ICommandHandler *director = dynamic_cast<SwigDirector_ICommandHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::ICommandHandler *obj = *((apl::ICommandHandler **)&objarg);
  SwigDirector_ICommandHandler *director = dynamic_cast<SwigDirector_ICommandHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1FixedCommandHandler(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  apl::CommandStatus arg1 ;
  apl::FixedCommandHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::CommandStatus)jarg1; 
  result = (apl::FixedCommandHandler *)new SwigDirector_FixedCommandHandler(jenv,arg1);
  *(apl::FixedCommandHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1HandleControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  apl::FixedCommandHandler *arg1 = (apl::FixedCommandHandler *) 0 ;
  apl::BinaryOutput *arg2 = 0 ;
  size_t arg3 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::FixedCommandHandler **)&jarg1; 
  arg2 = *(apl::BinaryOutput **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::BinaryOutput & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (apl::CommandStatus)(arg1)->HandleControl(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1HandleControlSwigExplicitFixedCommandHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  apl::FixedCommandHandler *arg1 = (apl::FixedCommandHandler *) 0 ;
  apl::BinaryOutput *arg2 = 0 ;
  size_t arg3 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::FixedCommandHandler **)&jarg1; 
  arg2 = *(apl::BinaryOutput **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::BinaryOutput & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (apl::CommandStatus)(arg1)->apl::FixedCommandHandler::HandleControl(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1HandleControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  apl::FixedCommandHandler *arg1 = (apl::FixedCommandHandler *) 0 ;
  apl::Setpoint *arg2 = 0 ;
  size_t arg3 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::FixedCommandHandler **)&jarg1; 
  arg2 = *(apl::Setpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Setpoint & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (apl::CommandStatus)(arg1)->HandleControl(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1HandleControlSwigExplicitFixedCommandHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  apl::FixedCommandHandler *arg1 = (apl::FixedCommandHandler *) 0 ;
  apl::Setpoint *arg2 = 0 ;
  size_t arg3 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::FixedCommandHandler **)&jarg1; 
  arg2 = *(apl::Setpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::Setpoint & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (apl::CommandStatus)(arg1)->apl::FixedCommandHandler::HandleControl(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1mStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::FixedCommandHandler *arg1 = (apl::FixedCommandHandler *) 0 ;
  apl::CommandStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::FixedCommandHandler **)&jarg1; 
  arg2 = (apl::CommandStatus)jarg2; 
  if (arg1) (arg1)->mStatus = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1mStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::FixedCommandHandler *arg1 = (apl::FixedCommandHandler *) 0 ;
  apl::CommandStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::FixedCommandHandler **)&jarg1; 
  result = (apl::CommandStatus) ((arg1)->mStatus);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1FixedCommandHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::FixedCommandHandler *arg1 = (apl::FixedCommandHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::FixedCommandHandler **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::FixedCommandHandler *obj = *((apl::FixedCommandHandler **)&objarg);
  (void)jcls;
  SwigDirector_FixedCommandHandler *director = dynamic_cast<SwigDirector_FixedCommandHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::FixedCommandHandler *obj = *((apl::FixedCommandHandler **)&objarg);
  SwigDirector_FixedCommandHandler *director = dynamic_cast<SwigDirector_FixedCommandHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ICommandSource(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::ICommandSource *arg1 = (apl::ICommandSource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::ICommandSource **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandSource_1SetNotifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::ICommandSource *arg1 = (apl::ICommandSource *) 0 ;
  apl::INotifier *arg2 = (apl::INotifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::ICommandSource **)&jarg1; 
  arg2 = *(apl::INotifier **)&jarg2; 
  (arg1)->SetNotifier(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandSource_1ExecuteCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  apl::ICommandSource *arg1 = (apl::ICommandSource *) 0 ;
  apl::ICommandHandler *arg2 = (apl::ICommandHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::ICommandSource **)&jarg1; 
  arg2 = *(apl::ICommandHandler **)&jarg2; 
  result = (bool)(arg1)->ExecuteCommand(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ICommandSource(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::ICommandSource *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::ICommandSource *)new SwigDirector_ICommandSource(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::ICommandSource **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandSource_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::ICommandSource *obj = *((apl::ICommandSource **)&objarg);
  (void)jcls;
  SwigDirector_ICommandSource *director = dynamic_cast<SwigDirector_ICommandSource *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ICommandSource_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::ICommandSource *obj = *((apl::ICommandSource **)&objarg);
  SwigDirector_ICommandSource *director = dynamic_cast<SwigDirector_ICommandSource *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VtoRouterSettings_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::VtoRouterSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::VtoRouterSettings *)new apl::dnp::VtoRouterSettings();
  *(apl::dnp::VtoRouterSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VtoRouterSettings_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jboolean jarg2, jboolean jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  boost::uint8_t arg1 ;
  bool arg2 ;
  bool arg3 ;
  apl::millis_t arg4 ;
  apl::dnp::VtoRouterSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint8_t)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (apl::millis_t)jarg4; 
  result = (apl::dnp::VtoRouterSettings *)new apl::dnp::VtoRouterSettings(arg1,arg2,arg3,arg4);
  *(apl::dnp::VtoRouterSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VtoRouterSettings_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jshort jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  boost::uint8_t arg1 ;
  bool arg2 ;
  bool arg3 ;
  apl::dnp::VtoRouterSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint8_t)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (apl::dnp::VtoRouterSettings *)new apl::dnp::VtoRouterSettings(arg1,arg2,arg3);
  *(apl::dnp::VtoRouterSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterSettings_1CHANNEL_1ID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->CHANNEL_ID = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterSettings_1CHANNEL_1ID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  result =  ((arg1)->CHANNEL_ID);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterSettings_1OPEN_1RETRY_1MS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->OPEN_RETRY_MS = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterSettings_1OPEN_1RETRY_1MS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  result =  ((arg1)->OPEN_RETRY_MS);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterSettings_1START_1LOCAL_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->START_LOCAL = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterSettings_1START_1LOCAL_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  result = (bool) ((arg1)->START_LOCAL);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterSettings_1DISABLE_1EXTENSIONS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DISABLE_EXTENSIONS = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterSettings_1DISABLE_1EXTENSIONS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  result = (bool) ((arg1)->DISABLE_EXTENSIONS);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VtoRouterSettings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::VtoRouterSettings *arg1 = (apl::dnp::VtoRouterSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::VtoRouterSettings **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VtoRouterConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::VtoRouterConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::VtoRouterConfig *)new apl::dnp::VtoRouterConfig();
  *(apl::dnp::VtoRouterConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterConfig_1mPhysicalLayerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  apl::dnp::VtoRouterConfig *arg1 = (apl::dnp::VtoRouterConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mPhysicalLayerName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterConfig_1mPhysicalLayerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::dnp::VtoRouterConfig *arg1 = (apl::dnp::VtoRouterConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->mPhysicalLayerName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterConfig_1mSettings_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::VtoRouterConfig *arg1 = (apl::dnp::VtoRouterConfig *) 0 ;
  apl::dnp::VtoRouterSettings *arg2 = (apl::dnp::VtoRouterSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::VtoRouterConfig **)&jarg1; 
  arg2 = *(apl::dnp::VtoRouterSettings **)&jarg2; 
  if (arg1) (arg1)->mSettings = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoRouterConfig_1mSettings_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::VtoRouterConfig *arg1 = (apl::dnp::VtoRouterConfig *) 0 ;
  apl::dnp::VtoRouterSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoRouterConfig **)&jarg1; 
  result = (apl::dnp::VtoRouterSettings *)& ((arg1)->mSettings);
  *(apl::dnp::VtoRouterSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VtoRouterConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::VtoRouterConfig *arg1 = (apl::dnp::VtoRouterConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::VtoRouterConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VtoConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::VtoConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::VtoConfig *)new apl::dnp::VtoConfig();
  *(apl::dnp::VtoConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoConfig_1AddVtoRouterConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::VtoConfig *arg1 = (apl::dnp::VtoConfig *) 0 ;
  apl::dnp::VtoRouterConfig *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::VtoConfig **)&jarg1; 
  arg2 = *(apl::dnp::VtoRouterConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::dnp::VtoRouterConfig & reference is null");
    return ;
  } 
  (arg1)->AddVtoRouterConfig(*arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoConfig_1mRouterConfigs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::VtoConfig *arg1 = (apl::dnp::VtoConfig *) 0 ;
  std::vector< apl::dnp::VtoRouterConfig > *arg2 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::VtoConfig **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg2; 
  if (arg1) (arg1)->mRouterConfigs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VtoConfig_1mRouterConfigs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::VtoConfig *arg1 = (apl::dnp::VtoConfig *) 0 ;
  std::vector< apl::dnp::VtoRouterConfig > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::VtoConfig **)&jarg1; 
  result = (std::vector< apl::dnp::VtoRouterConfig > *)& ((arg1)->mRouterConfigs);
  *(std::vector< apl::dnp::VtoRouterConfig > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VtoConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::VtoConfig *arg1 = (apl::dnp::VtoConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::VtoConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfVtoRouterConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::VtoRouterConfig > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< apl::dnp::VtoRouterConfig > *)new std::vector< apl::dnp::VtoRouterConfig >();
  *(std::vector< apl::dnp::VtoRouterConfig > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfVtoRouterConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::VtoRouterConfig >::size_type arg1 ;
  std::vector< apl::dnp::VtoRouterConfig > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< apl::dnp::VtoRouterConfig >::size_type)jarg1; 
  result = (std::vector< apl::dnp::VtoRouterConfig > *)new std::vector< apl::dnp::VtoRouterConfig >(arg1);
  *(std::vector< apl::dnp::VtoRouterConfig > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfVtoRouterConfig_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  std::vector< apl::dnp::VtoRouterConfig >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  result = ((std::vector< apl::dnp::VtoRouterConfig > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfVtoRouterConfig_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  std::vector< apl::dnp::VtoRouterConfig >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  result = ((std::vector< apl::dnp::VtoRouterConfig > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfVtoRouterConfig_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  std::vector< apl::dnp::VtoRouterConfig >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  arg2 = (std::vector< apl::dnp::VtoRouterConfig >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfVtoRouterConfig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  result = (bool)((std::vector< apl::dnp::VtoRouterConfig > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfVtoRouterConfig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfVtoRouterConfig_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  std::vector< apl::dnp::VtoRouterConfig >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::VtoRouterConfig >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::VtoRouterConfig >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< apl::dnp::VtoRouterConfig >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfVtoRouterConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::VtoRouterConfig >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< apl::dnp::VtoRouterConfig >::value_type *) &std_vector_Sl_apl_dnp_VtoRouterConfig_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< apl::dnp::VtoRouterConfig >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfVtoRouterConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::VtoRouterConfig >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< apl::dnp::VtoRouterConfig >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::VtoRouterConfig >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_apl_dnp_VtoRouterConfig_Sg__set(arg1,arg2,(apl::dnp::VtoRouterConfig const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VectorOfVtoRouterConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< apl::dnp::VtoRouterConfig > *arg1 = (std::vector< apl::dnp::VtoRouterConfig > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< apl::dnp::VtoRouterConfig > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PC_1CLASS_10_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::dnp::PointClass result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::PointClass)apl::dnp::PC_CLASS_0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PC_1CLASS_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::dnp::PointClass result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::PointClass)apl::dnp::PC_CLASS_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PC_1CLASS_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::dnp::PointClass result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::PointClass)apl::dnp::PC_CLASS_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PC_1CLASS_13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::dnp::PointClass result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::PointClass)apl::dnp::PC_CLASS_3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PC_1ALL_1EVENTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::dnp::PointClass result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::PointClass)apl::dnp::PC_ALL_EVENTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PC_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  apl::dnp::PointClass result;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::PointClass)apl::dnp::PC_INVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IntToPointClass(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  apl::dnp::PointClass result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (apl::dnp::PointClass)apl::dnp::IntToPointClass(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1LinkConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jlong jarg3, jint jarg4, jint jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  size_t arg3 ;
  boost::uint16_t arg4 ;
  boost::uint16_t arg5 ;
  apl::millis_t arg6 ;
  apl::dnp::LinkConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = (size_t)jarg3; 
  arg4 = (boost::uint16_t)jarg4; 
  arg5 = (boost::uint16_t)jarg5; 
  arg6 = (apl::millis_t)jarg6; 
  result = (apl::dnp::LinkConfig *)new apl::dnp::LinkConfig(arg1,arg2,arg3,arg4,arg5,arg6);
  *(apl::dnp::LinkConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1LinkConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  apl::dnp::LinkConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (apl::dnp::LinkConfig *)new apl::dnp::LinkConfig(arg1,arg2);
  *(apl::dnp::LinkConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1IsMaster_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsMaster = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1IsMaster_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  result = (bool) ((arg1)->IsMaster);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1UseConfirms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseConfirms = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1UseConfirms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  result = (bool) ((arg1)->UseConfirms);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1NumRetry_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->NumRetry = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1NumRetry_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  result =  ((arg1)->NumRetry);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1LocalAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->LocalAddr = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1LocalAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  result =  ((arg1)->LocalAddr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1RemoteAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->RemoteAddr = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1RemoteAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  result =  ((arg1)->RemoteAddr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1Timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->Timeout = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_LinkConfig_1Timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  result =  ((arg1)->Timeout);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1LinkConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::LinkConfig *arg1 = (apl::dnp::LinkConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::LinkConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1AppConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::AppConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::AppConfig *)new apl::dnp::AppConfig();
  *(apl::dnp::AppConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1AppConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  apl::millis_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  apl::dnp::AppConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::millis_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (apl::dnp::AppConfig *)new apl::dnp::AppConfig(arg1,arg2,arg3);
  *(apl::dnp::AppConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1AppConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  apl::millis_t arg1 ;
  size_t arg2 ;
  apl::dnp::AppConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::millis_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (apl::dnp::AppConfig *)new apl::dnp::AppConfig(arg1,arg2);
  *(apl::dnp::AppConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1AppConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  apl::millis_t arg1 ;
  apl::dnp::AppConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::millis_t)jarg1; 
  result = (apl::dnp::AppConfig *)new apl::dnp::AppConfig(arg1);
  *(apl::dnp::AppConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AppConfig_1RspTimeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::AppConfig *arg1 = (apl::dnp::AppConfig *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::AppConfig **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->RspTimeout = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AppConfig_1RspTimeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::AppConfig *arg1 = (apl::dnp::AppConfig *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::AppConfig **)&jarg1; 
  result =  ((arg1)->RspTimeout);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AppConfig_1NumRetry_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::AppConfig *arg1 = (apl::dnp::AppConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::AppConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->NumRetry = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AppConfig_1NumRetry_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::AppConfig *arg1 = (apl::dnp::AppConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::AppConfig **)&jarg1; 
  result =  ((arg1)->NumRetry);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AppConfig_1FragSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::AppConfig *arg1 = (apl::dnp::AppConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::AppConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->FragSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_AppConfig_1FragSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::AppConfig *arg1 = (apl::dnp::AppConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::AppConfig **)&jarg1; 
  result =  ((arg1)->FragSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1AppConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::AppConfig *arg1 = (apl::dnp::AppConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::AppConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ExceptionScan_1ClassMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::ExceptionScan *arg1 = (apl::dnp::ExceptionScan *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ExceptionScan **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ClassMask = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ExceptionScan_1ClassMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::dnp::ExceptionScan *arg1 = (apl::dnp::ExceptionScan *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ExceptionScan **)&jarg1; 
  result = (int) ((arg1)->ClassMask);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ExceptionScan_1ScanRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::ExceptionScan *arg1 = (apl::dnp::ExceptionScan *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ExceptionScan **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->ScanRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ExceptionScan_1ScanRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::ExceptionScan *arg1 = (apl::dnp::ExceptionScan *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ExceptionScan **)&jarg1; 
  result =  ((arg1)->ScanRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ExceptionScan(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::ExceptionScan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::dnp::ExceptionScan *)new apl::dnp::ExceptionScan();
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::dnp::ExceptionScan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ExceptionScan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::ExceptionScan *arg1 = (apl::dnp::ExceptionScan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::ExceptionScan **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ConvertStackStateToString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  apl::dnp::StackStates arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (apl::dnp::StackStates)jarg1; 
  result = apl::dnp::ConvertStackStateToString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1IStackObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::IStackObserver *arg1 = (apl::dnp::IStackObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::IStackObserver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IStackObserver_1OnStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::IStackObserver *arg1 = (apl::dnp::IStackObserver *) 0 ;
  apl::dnp::StackStates arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::IStackObserver **)&jarg1; 
  arg2 = (apl::dnp::StackStates)jarg2; 
  (arg1)->OnStateChange(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1IStackObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::IStackObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::dnp::IStackObserver *)new SwigDirector_IStackObserver(jenv);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::dnp::IStackObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IStackObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  apl::dnp::IStackObserver *obj = *((apl::dnp::IStackObserver **)&objarg);
  (void)jcls;
  SwigDirector_IStackObserver *director = dynamic_cast<SwigDirector_IStackObserver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IStackObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  apl::dnp::IStackObserver *obj = *((apl::dnp::IStackObserver **)&objarg);
  SwigDirector_IStackObserver *director = dynamic_cast<SwigDirector_IStackObserver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ClassMask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  apl::dnp::ClassMask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (apl::dnp::ClassMask *)new apl::dnp::ClassMask(arg1,arg2,arg3);
  *(apl::dnp::ClassMask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ClassMask_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::ClassMask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::ClassMask *)new apl::dnp::ClassMask();
  *(apl::dnp::ClassMask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ClassMask_1class1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::ClassMask *arg1 = (apl::dnp::ClassMask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ClassMask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->class1 = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ClassMask_1class1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::ClassMask *arg1 = (apl::dnp::ClassMask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ClassMask **)&jarg1; 
  result = (bool) ((arg1)->class1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ClassMask_1class2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::ClassMask *arg1 = (apl::dnp::ClassMask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ClassMask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->class2 = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ClassMask_1class2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::ClassMask *arg1 = (apl::dnp::ClassMask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ClassMask **)&jarg1; 
  result = (bool) ((arg1)->class2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ClassMask_1class3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::ClassMask *arg1 = (apl::dnp::ClassMask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ClassMask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->class3 = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ClassMask_1class3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::ClassMask *arg1 = (apl::dnp::ClassMask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ClassMask **)&jarg1; 
  result = (bool) ((arg1)->class3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ClassMask_1GetMask(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (int)apl::dnp::ClassMask::GetMask(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ClassMask_1IsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::ClassMask *arg1 = (apl::dnp::ClassMask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ClassMask **)&jarg1; 
  result = (bool)(arg1)->IsEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ClassMask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::ClassMask *arg1 = (apl::dnp::ClassMask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::ClassMask **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfExceptionScan_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ExceptionScan > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< apl::dnp::ExceptionScan > *)new std::vector< apl::dnp::ExceptionScan >();
  *(std::vector< apl::dnp::ExceptionScan > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfExceptionScan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ExceptionScan >::size_type arg1 ;
  std::vector< apl::dnp::ExceptionScan > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< apl::dnp::ExceptionScan >::size_type)jarg1; 
  result = (std::vector< apl::dnp::ExceptionScan > *)new std::vector< apl::dnp::ExceptionScan >(arg1);
  *(std::vector< apl::dnp::ExceptionScan > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfExceptionScan_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  std::vector< apl::dnp::ExceptionScan >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  result = ((std::vector< apl::dnp::ExceptionScan > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfExceptionScan_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  std::vector< apl::dnp::ExceptionScan >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  result = ((std::vector< apl::dnp::ExceptionScan > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfExceptionScan_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  std::vector< apl::dnp::ExceptionScan >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  arg2 = (std::vector< apl::dnp::ExceptionScan >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfExceptionScan_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  result = (bool)((std::vector< apl::dnp::ExceptionScan > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfExceptionScan_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfExceptionScan_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  std::vector< apl::dnp::ExceptionScan >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::ExceptionScan >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::ExceptionScan >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< apl::dnp::ExceptionScan >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfExceptionScan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::ExceptionScan >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< apl::dnp::ExceptionScan >::value_type *) &std_vector_Sl_apl_dnp_ExceptionScan_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< apl::dnp::ExceptionScan >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfExceptionScan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::ExceptionScan >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< apl::dnp::ExceptionScan >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::ExceptionScan >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_apl_dnp_ExceptionScan_Sg__set(arg1,arg2,(apl::dnp::ExceptionScan const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VectorOfExceptionScan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< apl::dnp::ExceptionScan > *arg1 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1MasterConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::MasterConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::MasterConfig *)new apl::dnp::MasterConfig();
  *(apl::dnp::MasterConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1AddExceptionScan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  int arg2 ;
  apl::millis_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (apl::millis_t)jarg3; 
  (arg1)->AddExceptionScan(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1FragSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->FragSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1FragSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result =  ((arg1)->FragSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1VtoWriterQueueSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->VtoWriterQueueSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1VtoWriterQueueSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result =  ((arg1)->VtoWriterQueueSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1UseNonStandardVtoFunction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseNonStandardVtoFunction = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1UseNonStandardVtoFunction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result = (bool) ((arg1)->UseNonStandardVtoFunction);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1AllowTimeSync_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AllowTimeSync = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1AllowTimeSync_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result = (bool) ((arg1)->AllowTimeSync);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1DoUnsolOnStartup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DoUnsolOnStartup = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1DoUnsolOnStartup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result = (bool) ((arg1)->DoUnsolOnStartup);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1EnableUnsol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EnableUnsol = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1EnableUnsol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result = (bool) ((arg1)->EnableUnsol);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1UnsolClassMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UnsolClassMask = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1UnsolClassMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result = (int) ((arg1)->UnsolClassMask);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1IntegrityRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->IntegrityRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1IntegrityRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result =  ((arg1)->IntegrityRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1TaskRetryRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->TaskRetryRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1TaskRetryRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result =  ((arg1)->TaskRetryRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1mScans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  std::vector< apl::dnp::ExceptionScan > *arg2 = (std::vector< apl::dnp::ExceptionScan > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::ExceptionScan > **)&jarg2; 
  if (arg1) (arg1)->mScans = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1mScans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  std::vector< apl::dnp::ExceptionScan > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result = (std::vector< apl::dnp::ExceptionScan > *)& ((arg1)->mScans);
  *(std::vector< apl::dnp::ExceptionScan > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1mpObserver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  apl::dnp::IStackObserver *arg2 = (apl::dnp::IStackObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  arg2 = *(apl::dnp::IStackObserver **)&jarg2; 
  if (arg1) (arg1)->mpObserver = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterConfig_1mpObserver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  apl::dnp::IStackObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  result = (apl::dnp::IStackObserver *) ((arg1)->mpObserver);
  *(apl::dnp::IStackObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1MasterConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::MasterConfig *arg1 = (apl::dnp::MasterConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::MasterConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1GrpVar_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::GrpVar *)new apl::dnp::GrpVar();
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1GrpVar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (apl::dnp::GrpVar *)new apl::dnp::GrpVar(arg1,arg2);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_GrpVar_1Grp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::GrpVar *arg1 = (apl::dnp::GrpVar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::GrpVar **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Grp = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_GrpVar_1Grp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::dnp::GrpVar *arg1 = (apl::dnp::GrpVar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::GrpVar **)&jarg1; 
  result = (int) ((arg1)->Grp);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_GrpVar_1Var_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::GrpVar *arg1 = (apl::dnp::GrpVar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::GrpVar **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Var = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_GrpVar_1Var_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::dnp::GrpVar *arg1 = (apl::dnp::GrpVar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::GrpVar **)&jarg1; 
  result = (int) ((arg1)->Var);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1GrpVar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::GrpVar *arg1 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::GrpVar **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1EventMaxConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::EventMaxConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::EventMaxConfig *)new apl::dnp::EventMaxConfig();
  *(apl::dnp::EventMaxConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1EventMaxConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  apl::dnp::EventMaxConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (apl::dnp::EventMaxConfig *)new apl::dnp::EventMaxConfig(arg1,arg2,arg3,arg4);
  *(apl::dnp::EventMaxConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventMaxConfig_1mMaxBinaryEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->mMaxBinaryEvents = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventMaxConfig_1mMaxBinaryEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  result =  ((arg1)->mMaxBinaryEvents);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventMaxConfig_1mMaxAnalogEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->mMaxAnalogEvents = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventMaxConfig_1mMaxAnalogEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  result =  ((arg1)->mMaxAnalogEvents);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventMaxConfig_1mMaxCounterEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->mMaxCounterEvents = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventMaxConfig_1mMaxCounterEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  result =  ((arg1)->mMaxCounterEvents);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventMaxConfig_1mMaxVtoEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->mMaxVtoEvents = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventMaxConfig_1mMaxVtoEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  result =  ((arg1)->mMaxVtoEvents);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1EventMaxConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::EventMaxConfig *arg1 = (apl::dnp::EventMaxConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::EventMaxConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1SlaveConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::SlaveConfig *)new apl::dnp::SlaveConfig();
  *(apl::dnp::SlaveConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mMaxControls_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->mMaxControls = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mMaxControls_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result =  ((arg1)->mMaxControls);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mDisableUnsol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mDisableUnsol = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mDisableUnsol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (bool) ((arg1)->mDisableUnsol);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mUnsolMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::ClassMask *arg2 = (apl::dnp::ClassMask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::ClassMask **)&jarg2; 
  if (arg1) (arg1)->mUnsolMask = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mUnsolMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::ClassMask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::ClassMask *)& ((arg1)->mUnsolMask);
  *(apl::dnp::ClassMask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mAllowTimeSync_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mAllowTimeSync = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mAllowTimeSync_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (bool) ((arg1)->mAllowTimeSync);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mTimeSyncPeriod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->mTimeSyncPeriod = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mTimeSyncPeriod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result =  ((arg1)->mTimeSyncPeriod);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mUnsolPackDelay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->mUnsolPackDelay = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mUnsolPackDelay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result =  ((arg1)->mUnsolPackDelay);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mUnsolRetryDelay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->mUnsolRetryDelay = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mUnsolRetryDelay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result =  ((arg1)->mUnsolRetryDelay);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mMaxFragSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->mMaxFragSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mMaxFragSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result =  ((arg1)->mMaxFragSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mVtoWriterQueueSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->mVtoWriterQueueSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mVtoWriterQueueSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result =  ((arg1)->mVtoWriterQueueSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventMaxConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::EventMaxConfig *arg2 = (apl::dnp::EventMaxConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::EventMaxConfig **)&jarg2; 
  if (arg1) (arg1)->mEventMaxConfig = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventMaxConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::EventMaxConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::EventMaxConfig *)& ((arg1)->mEventMaxConfig);
  *(apl::dnp::EventMaxConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mStaticBinary_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *arg2 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::GrpVar **)&jarg2; 
  if (arg1) (arg1)->mStaticBinary = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mStaticBinary_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::GrpVar *)& ((arg1)->mStaticBinary);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mStaticAnalog_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *arg2 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::GrpVar **)&jarg2; 
  if (arg1) (arg1)->mStaticAnalog = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mStaticAnalog_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::GrpVar *)& ((arg1)->mStaticAnalog);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mStaticCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *arg2 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::GrpVar **)&jarg2; 
  if (arg1) (arg1)->mStaticCounter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mStaticCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::GrpVar *)& ((arg1)->mStaticCounter);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mStaticSetpointStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *arg2 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::GrpVar **)&jarg2; 
  if (arg1) (arg1)->mStaticSetpointStatus = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mStaticSetpointStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::GrpVar *)& ((arg1)->mStaticSetpointStatus);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventBinary_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *arg2 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::GrpVar **)&jarg2; 
  if (arg1) (arg1)->mEventBinary = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventBinary_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::GrpVar *)& ((arg1)->mEventBinary);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventAnalog_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *arg2 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::GrpVar **)&jarg2; 
  if (arg1) (arg1)->mEventAnalog = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventAnalog_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::GrpVar *)& ((arg1)->mEventAnalog);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *arg2 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::GrpVar **)&jarg2; 
  if (arg1) (arg1)->mEventCounter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::GrpVar *)& ((arg1)->mEventCounter);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventVto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *arg2 = (apl::dnp::GrpVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::GrpVar **)&jarg2; 
  if (arg1) (arg1)->mEventVto = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mEventVto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::GrpVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::GrpVar *)& ((arg1)->mEventVto);
  *(apl::dnp::GrpVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mpObserver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::IStackObserver *arg2 = (apl::dnp::IStackObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  arg2 = *(apl::dnp::IStackObserver **)&jarg2; 
  if (arg1) (arg1)->mpObserver = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveConfig_1mpObserver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  apl::dnp::IStackObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  result = (apl::dnp::IStackObserver *) ((arg1)->mpObserver);
  *(apl::dnp::IStackObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1SlaveConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::SlaveConfig *arg1 = (apl::dnp::SlaveConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::SlaveConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1PointRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  apl::dnp::PointRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (apl::dnp::PointRecord *)new apl::dnp::PointRecord((std::string const &)*arg1);
  *(apl::dnp::PointRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1PointRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::PointRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::PointRecord *)new apl::dnp::PointRecord();
  *(apl::dnp::PointRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PointRecord_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  apl::dnp::PointRecord *arg1 = (apl::dnp::PointRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::PointRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_PointRecord_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  apl::dnp::PointRecord *arg1 = (apl::dnp::PointRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::PointRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1PointRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::PointRecord *arg1 = (apl::dnp::PointRecord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::PointRecord **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1EventPointRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  apl::dnp::PointClass arg2 ;
  apl::dnp::EventPointRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (apl::dnp::PointClass)jarg2; 
  result = (apl::dnp::EventPointRecord *)new apl::dnp::EventPointRecord((std::string const &)*arg1,arg2);
  *(apl::dnp::EventPointRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1EventPointRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::EventPointRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::EventPointRecord *)new apl::dnp::EventPointRecord();
  *(apl::dnp::EventPointRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventPointRecord_1EventClass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::EventPointRecord *arg1 = (apl::dnp::EventPointRecord *) 0 ;
  apl::dnp::PointClass arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventPointRecord **)&jarg1; 
  arg2 = (apl::dnp::PointClass)jarg2; 
  if (arg1) (arg1)->EventClass = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventPointRecord_1EventClass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::dnp::EventPointRecord *arg1 = (apl::dnp::EventPointRecord *) 0 ;
  apl::dnp::PointClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::EventPointRecord **)&jarg1; 
  result = (apl::dnp::PointClass) ((arg1)->EventClass);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1EventPointRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::EventPointRecord *arg1 = (apl::dnp::EventPointRecord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::EventPointRecord **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeadbandPointRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  apl::dnp::PointClass arg2 ;
  double arg3 ;
  apl::dnp::DeadbandPointRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (apl::dnp::PointClass)jarg2; 
  arg3 = (double)jarg3; 
  result = (apl::dnp::DeadbandPointRecord *)new apl::dnp::DeadbandPointRecord((std::string const &)*arg1,arg2,arg3);
  *(apl::dnp::DeadbandPointRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeadbandPointRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::DeadbandPointRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::DeadbandPointRecord *)new apl::dnp::DeadbandPointRecord();
  *(apl::dnp::DeadbandPointRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeadbandPointRecord_1Deadband_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  apl::dnp::DeadbandPointRecord *arg1 = (apl::dnp::DeadbandPointRecord *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeadbandPointRecord **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Deadband = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeadbandPointRecord_1Deadband_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  apl::dnp::DeadbandPointRecord *arg1 = (apl::dnp::DeadbandPointRecord *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeadbandPointRecord **)&jarg1; 
  result = (double) ((arg1)->Deadband);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1DeadbandPointRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::DeadbandPointRecord *arg1 = (apl::dnp::DeadbandPointRecord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::DeadbandPointRecord **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ControlRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  apl::CommandModes arg2 ;
  apl::millis_t arg3 ;
  apl::dnp::ControlRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (apl::CommandModes)jarg2; 
  arg3 = (apl::millis_t)jarg3; 
  result = (apl::dnp::ControlRecord *)new apl::dnp::ControlRecord((std::string const &)*arg1,arg2,arg3);
  *(apl::dnp::ControlRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ControlRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  apl::CommandModes arg2 ;
  apl::dnp::ControlRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (apl::CommandModes)jarg2; 
  result = (apl::dnp::ControlRecord *)new apl::dnp::ControlRecord((std::string const &)*arg1,arg2);
  *(apl::dnp::ControlRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ControlRecord_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  apl::dnp::ControlRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (apl::dnp::ControlRecord *)new apl::dnp::ControlRecord((std::string const &)*arg1);
  *(apl::dnp::ControlRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1ControlRecord_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::ControlRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::ControlRecord *)new apl::dnp::ControlRecord();
  *(apl::dnp::ControlRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlRecord_1CommandMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  apl::dnp::ControlRecord *arg1 = (apl::dnp::ControlRecord *) 0 ;
  apl::CommandModes arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ControlRecord **)&jarg1; 
  arg2 = (apl::CommandModes)jarg2; 
  if (arg1) (arg1)->CommandMode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlRecord_1CommandMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  apl::dnp::ControlRecord *arg1 = (apl::dnp::ControlRecord *) 0 ;
  apl::CommandModes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ControlRecord **)&jarg1; 
  result = (apl::CommandModes) ((arg1)->CommandMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlRecord_1SelectTimeoutMS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  apl::dnp::ControlRecord *arg1 = (apl::dnp::ControlRecord *) 0 ;
  apl::millis_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ControlRecord **)&jarg1; 
  arg2 = (apl::millis_t)jarg2; 
  if (arg1) (arg1)->SelectTimeoutMS = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlRecord_1SelectTimeoutMS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::ControlRecord *arg1 = (apl::dnp::ControlRecord *) 0 ;
  apl::millis_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::ControlRecord **)&jarg1; 
  result =  ((arg1)->SelectTimeoutMS);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1ControlRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::ControlRecord *arg1 = (apl::dnp::ControlRecord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::ControlRecord **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfEventPointRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::EventPointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< apl::dnp::EventPointRecord > *)new std::vector< apl::dnp::EventPointRecord >();
  *(std::vector< apl::dnp::EventPointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfEventPointRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::EventPointRecord >::size_type arg1 ;
  std::vector< apl::dnp::EventPointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< apl::dnp::EventPointRecord >::size_type)jarg1; 
  result = (std::vector< apl::dnp::EventPointRecord > *)new std::vector< apl::dnp::EventPointRecord >(arg1);
  *(std::vector< apl::dnp::EventPointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfEventPointRecord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  std::vector< apl::dnp::EventPointRecord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  result = ((std::vector< apl::dnp::EventPointRecord > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfEventPointRecord_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  std::vector< apl::dnp::EventPointRecord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  result = ((std::vector< apl::dnp::EventPointRecord > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfEventPointRecord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  std::vector< apl::dnp::EventPointRecord >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  arg2 = (std::vector< apl::dnp::EventPointRecord >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfEventPointRecord_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  result = (bool)((std::vector< apl::dnp::EventPointRecord > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfEventPointRecord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfEventPointRecord_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  std::vector< apl::dnp::EventPointRecord >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::EventPointRecord >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::EventPointRecord >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< apl::dnp::EventPointRecord >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfEventPointRecord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::EventPointRecord >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< apl::dnp::EventPointRecord >::value_type *) &std_vector_Sl_apl_dnp_EventPointRecord_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< apl::dnp::EventPointRecord >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfEventPointRecord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::EventPointRecord >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< apl::dnp::EventPointRecord >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::EventPointRecord >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_apl_dnp_EventPointRecord_Sg__set(arg1,arg2,(apl::dnp::EventPointRecord const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VectorOfEventPointRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< apl::dnp::EventPointRecord > *arg1 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfDeadbandPointRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::DeadbandPointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< apl::dnp::DeadbandPointRecord > *)new std::vector< apl::dnp::DeadbandPointRecord >();
  *(std::vector< apl::dnp::DeadbandPointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfDeadbandPointRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::DeadbandPointRecord >::size_type arg1 ;
  std::vector< apl::dnp::DeadbandPointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< apl::dnp::DeadbandPointRecord >::size_type)jarg1; 
  result = (std::vector< apl::dnp::DeadbandPointRecord > *)new std::vector< apl::dnp::DeadbandPointRecord >(arg1);
  *(std::vector< apl::dnp::DeadbandPointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfDeadbandPointRecord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  std::vector< apl::dnp::DeadbandPointRecord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  result = ((std::vector< apl::dnp::DeadbandPointRecord > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfDeadbandPointRecord_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  std::vector< apl::dnp::DeadbandPointRecord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  result = ((std::vector< apl::dnp::DeadbandPointRecord > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfDeadbandPointRecord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  std::vector< apl::dnp::DeadbandPointRecord >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  arg2 = (std::vector< apl::dnp::DeadbandPointRecord >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfDeadbandPointRecord_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  result = (bool)((std::vector< apl::dnp::DeadbandPointRecord > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfDeadbandPointRecord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfDeadbandPointRecord_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  std::vector< apl::dnp::DeadbandPointRecord >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::DeadbandPointRecord >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::DeadbandPointRecord >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< apl::dnp::DeadbandPointRecord >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfDeadbandPointRecord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::DeadbandPointRecord >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< apl::dnp::DeadbandPointRecord >::value_type *) &std_vector_Sl_apl_dnp_DeadbandPointRecord_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< apl::dnp::DeadbandPointRecord >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfDeadbandPointRecord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::DeadbandPointRecord >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< apl::dnp::DeadbandPointRecord >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::DeadbandPointRecord >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_apl_dnp_DeadbandPointRecord_Sg__set(arg1,arg2,(apl::dnp::DeadbandPointRecord const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VectorOfDeadbandPointRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< apl::dnp::DeadbandPointRecord > *arg1 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfControlRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ControlRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< apl::dnp::ControlRecord > *)new std::vector< apl::dnp::ControlRecord >();
  *(std::vector< apl::dnp::ControlRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfControlRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ControlRecord >::size_type arg1 ;
  std::vector< apl::dnp::ControlRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< apl::dnp::ControlRecord >::size_type)jarg1; 
  result = (std::vector< apl::dnp::ControlRecord > *)new std::vector< apl::dnp::ControlRecord >(arg1);
  *(std::vector< apl::dnp::ControlRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfControlRecord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  std::vector< apl::dnp::ControlRecord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  result = ((std::vector< apl::dnp::ControlRecord > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfControlRecord_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  std::vector< apl::dnp::ControlRecord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  result = ((std::vector< apl::dnp::ControlRecord > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfControlRecord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  std::vector< apl::dnp::ControlRecord >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  arg2 = (std::vector< apl::dnp::ControlRecord >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfControlRecord_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  result = (bool)((std::vector< apl::dnp::ControlRecord > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfControlRecord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfControlRecord_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  std::vector< apl::dnp::ControlRecord >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::ControlRecord >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::ControlRecord >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< apl::dnp::ControlRecord >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfControlRecord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::ControlRecord >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< apl::dnp::ControlRecord >::value_type *) &std_vector_Sl_apl_dnp_ControlRecord_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< apl::dnp::ControlRecord >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfControlRecord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::ControlRecord >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< apl::dnp::ControlRecord >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::ControlRecord >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_apl_dnp_ControlRecord_Sg__set(arg1,arg2,(apl::dnp::ControlRecord const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VectorOfControlRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< apl::dnp::ControlRecord > *arg1 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< apl::dnp::ControlRecord > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfPointRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::PointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< apl::dnp::PointRecord > *)new std::vector< apl::dnp::PointRecord >();
  *(std::vector< apl::dnp::PointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1VectorOfPointRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::PointRecord >::size_type arg1 ;
  std::vector< apl::dnp::PointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< apl::dnp::PointRecord >::size_type)jarg1; 
  result = (std::vector< apl::dnp::PointRecord > *)new std::vector< apl::dnp::PointRecord >(arg1);
  *(std::vector< apl::dnp::PointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfPointRecord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  std::vector< apl::dnp::PointRecord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  result = ((std::vector< apl::dnp::PointRecord > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfPointRecord_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  std::vector< apl::dnp::PointRecord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  result = ((std::vector< apl::dnp::PointRecord > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfPointRecord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  std::vector< apl::dnp::PointRecord >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  arg2 = (std::vector< apl::dnp::PointRecord >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfPointRecord_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  result = (bool)((std::vector< apl::dnp::PointRecord > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfPointRecord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfPointRecord_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  std::vector< apl::dnp::PointRecord >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::PointRecord >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::PointRecord >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< apl::dnp::PointRecord >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfPointRecord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::PointRecord >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< apl::dnp::PointRecord >::value_type *) &std_vector_Sl_apl_dnp_PointRecord_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< apl::dnp::PointRecord >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_VectorOfPointRecord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  int arg2 ;
  std::vector< apl::dnp::PointRecord >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< apl::dnp::PointRecord >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< apl::dnp::PointRecord >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_apl_dnp_PointRecord_Sg__set(arg1,arg2,(apl::dnp::PointRecord const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1VectorOfPointRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< apl::dnp::PointRecord > *arg1 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< apl::dnp::PointRecord > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeviceTemplate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (apl::dnp::DeviceTemplate *)new apl::dnp::DeviceTemplate(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeviceTemplate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (apl::dnp::DeviceTemplate *)new apl::dnp::DeviceTemplate(arg1,arg2,arg3,arg4,arg5,arg6);
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeviceTemplate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (apl::dnp::DeviceTemplate *)new apl::dnp::DeviceTemplate(arg1,arg2,arg3,arg4,arg5);
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeviceTemplate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (apl::dnp::DeviceTemplate *)new apl::dnp::DeviceTemplate(arg1,arg2,arg3,arg4);
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeviceTemplate_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (apl::dnp::DeviceTemplate *)new apl::dnp::DeviceTemplate(arg1,arg2,arg3);
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeviceTemplate_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (apl::dnp::DeviceTemplate *)new apl::dnp::DeviceTemplate(arg1,arg2);
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeviceTemplate_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (apl::dnp::DeviceTemplate *)new apl::dnp::DeviceTemplate(arg1);
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1DeviceTemplate_1_1SWIG_17(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::DeviceTemplate *)new apl::dnp::DeviceTemplate();
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mBinary_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::EventPointRecord > *arg2 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg2; 
  if (arg1) (arg1)->mBinary = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mBinary_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::EventPointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  result = (std::vector< apl::dnp::EventPointRecord > *)& ((arg1)->mBinary);
  *(std::vector< apl::dnp::EventPointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::EventPointRecord > *arg2 = (std::vector< apl::dnp::EventPointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::EventPointRecord > **)&jarg2; 
  if (arg1) (arg1)->mCounter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::EventPointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  result = (std::vector< apl::dnp::EventPointRecord > *)& ((arg1)->mCounter);
  *(std::vector< apl::dnp::EventPointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mAnalog_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::DeadbandPointRecord > *arg2 = (std::vector< apl::dnp::DeadbandPointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::DeadbandPointRecord > **)&jarg2; 
  if (arg1) (arg1)->mAnalog = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mAnalog_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::DeadbandPointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  result = (std::vector< apl::dnp::DeadbandPointRecord > *)& ((arg1)->mAnalog);
  *(std::vector< apl::dnp::DeadbandPointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mControlStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::PointRecord > *arg2 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::PointRecord > **)&jarg2; 
  if (arg1) (arg1)->mControlStatus = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mControlStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::PointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  result = (std::vector< apl::dnp::PointRecord > *)& ((arg1)->mControlStatus);
  *(std::vector< apl::dnp::PointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mSetpointStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::PointRecord > *arg2 = (std::vector< apl::dnp::PointRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::PointRecord > **)&jarg2; 
  if (arg1) (arg1)->mSetpointStatus = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mSetpointStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::PointRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  result = (std::vector< apl::dnp::PointRecord > *)& ((arg1)->mSetpointStatus);
  *(std::vector< apl::dnp::PointRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mControls_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::ControlRecord > *arg2 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::ControlRecord > **)&jarg2; 
  if (arg1) (arg1)->mControls = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mControls_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::ControlRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  result = (std::vector< apl::dnp::ControlRecord > *)& ((arg1)->mControls);
  *(std::vector< apl::dnp::ControlRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mSetpoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::ControlRecord > *arg2 = (std::vector< apl::dnp::ControlRecord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = *(std::vector< apl::dnp::ControlRecord > **)&jarg2; 
  if (arg1) (arg1)->mSetpoints = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mSetpoints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  std::vector< apl::dnp::ControlRecord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  result = (std::vector< apl::dnp::ControlRecord > *)& ((arg1)->mSetpoints);
  *(std::vector< apl::dnp::ControlRecord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mStartOnline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mStartOnline = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1mStartOnline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  result = (bool) ((arg1)->mStartOnline);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeviceTemplate_1Publish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  apl::IDataObserver *arg2 = (apl::IDataObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  arg2 = *(apl::IDataObserver **)&jarg2; 
  (arg1)->Publish(arg2);
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1DeviceTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::DeviceTemplate *arg1 = (apl::dnp::DeviceTemplate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::DeviceTemplate **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1MasterStackConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::MasterStackConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::MasterStackConfig *)new apl::dnp::MasterStackConfig();
  *(apl::dnp::MasterStackConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterStackConfig_1master_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  apl::dnp::MasterConfig *arg2 = (apl::dnp::MasterConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::MasterConfig **)&jarg2; 
  if (arg1) (arg1)->master = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterStackConfig_1master_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  apl::dnp::MasterConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  result = (apl::dnp::MasterConfig *)& ((arg1)->master);
  *(apl::dnp::MasterConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterStackConfig_1app_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  apl::dnp::AppConfig *arg2 = (apl::dnp::AppConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::AppConfig **)&jarg2; 
  if (arg1) (arg1)->app = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterStackConfig_1app_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  apl::dnp::AppConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  result = (apl::dnp::AppConfig *)& ((arg1)->app);
  *(apl::dnp::AppConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterStackConfig_1link_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  apl::dnp::LinkConfig *arg2 = (apl::dnp::LinkConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::LinkConfig **)&jarg2; 
  if (arg1) (arg1)->link = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterStackConfig_1link_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  apl::dnp::LinkConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  result = (apl::dnp::LinkConfig *)& ((arg1)->link);
  *(apl::dnp::LinkConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterStackConfig_1vto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  apl::dnp::VtoConfig *arg2 = (apl::dnp::VtoConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::VtoConfig **)&jarg2; 
  if (arg1) (arg1)->vto = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_MasterStackConfig_1vto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  apl::dnp::VtoConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  result = (apl::dnp::VtoConfig *)& ((arg1)->vto);
  *(apl::dnp::VtoConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1MasterStackConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::MasterStackConfig *arg1 = (apl::dnp::MasterStackConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::MasterStackConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1SlaveStackConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::SlaveStackConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (apl::dnp::SlaveStackConfig *)new apl::dnp::SlaveStackConfig();
  *(apl::dnp::SlaveStackConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1slave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::SlaveConfig *arg2 = (apl::dnp::SlaveConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::SlaveConfig **)&jarg2; 
  if (arg1) (arg1)->slave = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1slave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::SlaveConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  result = (apl::dnp::SlaveConfig *)& ((arg1)->slave);
  *(apl::dnp::SlaveConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1device_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::DeviceTemplate *arg2 = (apl::dnp::DeviceTemplate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::DeviceTemplate **)&jarg2; 
  if (arg1) (arg1)->device = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1device_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::DeviceTemplate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  result = (apl::dnp::DeviceTemplate *)& ((arg1)->device);
  *(apl::dnp::DeviceTemplate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1app_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::AppConfig *arg2 = (apl::dnp::AppConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::AppConfig **)&jarg2; 
  if (arg1) (arg1)->app = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1app_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::AppConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  result = (apl::dnp::AppConfig *)& ((arg1)->app);
  *(apl::dnp::AppConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1link_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::LinkConfig *arg2 = (apl::dnp::LinkConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::LinkConfig **)&jarg2; 
  if (arg1) (arg1)->link = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1link_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::LinkConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  result = (apl::dnp::LinkConfig *)& ((arg1)->link);
  *(apl::dnp::LinkConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1vto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::VtoConfig *arg2 = (apl::dnp::VtoConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  arg2 = *(apl::dnp::VtoConfig **)&jarg2; 
  if (arg1) (arg1)->vto = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SlaveStackConfig_1vto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  apl::dnp::VtoConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  result = (apl::dnp::VtoConfig *)& ((arg1)->vto);
  *(apl::dnp::VtoConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1SlaveStackConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::SlaveStackConfig *arg1 = (apl::dnp::SlaveStackConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::SlaveStackConfig **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_new_1StackManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  apl::dnp::StackManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (apl::dnp::StackManager *)new apl::dnp::StackManager();
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::dnp::StackManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_delete_1StackManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1AddTCPClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::string *arg2 = 0 ;
  apl::PhysLayerSettings arg3 ;
  std::string *arg4 = 0 ;
  boost::uint16_t arg5 ;
  apl::PhysLayerSettings *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(apl::PhysLayerSettings **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null apl::PhysLayerSettings");
    return ;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (boost::uint16_t)jarg5; 
  {
    try {
      (arg1)->AddTCPClient((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1AddTCPServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::string *arg2 = 0 ;
  apl::PhysLayerSettings arg3 ;
  std::string *arg4 = 0 ;
  boost::uint16_t arg5 ;
  apl::PhysLayerSettings *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(apl::PhysLayerSettings **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null apl::PhysLayerSettings");
    return ;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (boost::uint16_t)jarg5; 
  {
    try {
      (arg1)->AddTCPServer((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1AddSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::string *arg2 = 0 ;
  apl::PhysLayerSettings arg3 ;
  apl::SerialSettings arg4 ;
  apl::PhysLayerSettings *argp3 ;
  apl::SerialSettings *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(apl::PhysLayerSettings **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null apl::PhysLayerSettings");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(apl::SerialSettings **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null apl::SerialSettings");
    return ;
  }
  arg4 = *argp4; 
  {
    try {
      (arg1)->AddSerial((std::string const &)*arg2,arg3,arg4);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1AddMaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  apl::FilterLevel arg4 ;
  apl::IDataObserver *arg5 = (apl::IDataObserver *) 0 ;
  apl::dnp::MasterStackConfig *arg6 = 0 ;
  apl::ICommandAcceptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (apl::FilterLevel)jarg4; 
  arg5 = *(apl::IDataObserver **)&jarg5; 
  arg6 = *(apl::dnp::MasterStackConfig **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::dnp::MasterStackConfig const & reference is null");
    return 0;
  } 
  {
    try {
      result = (apl::ICommandAcceptor *)(arg1)->AddMaster((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,(apl::dnp::MasterStackConfig const &)*arg6);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::ICommandAcceptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1AddSlave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  apl::FilterLevel arg4 ;
  apl::ICommandAcceptor *arg5 = (apl::ICommandAcceptor *) 0 ;
  apl::dnp::SlaveStackConfig *arg6 = 0 ;
  apl::IDataObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (apl::FilterLevel)jarg4; 
  arg5 = *(apl::ICommandAcceptor **)&jarg5; 
  arg6 = *(apl::dnp::SlaveStackConfig **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "apl::dnp::SlaveStackConfig const & reference is null");
    return 0;
  } 
  {
    try {
      result = (apl::IDataObserver *)(arg1)->AddSlave((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,(apl::dnp::SlaveStackConfig const &)*arg6);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(apl::IDataObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1RemovePort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->RemovePort((std::string const &)*arg2);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1RemoveStack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->RemoveStack((std::string const &)*arg2);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1AddLogHook(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  apl::ILogBase *arg2 = (apl::ILogBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  arg2 = *(apl::ILogBase **)&jarg2; 
  {
    try {
      (arg1)->AddLogHook(arg2);
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1GetStackNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  {
    try {
      result = (arg1)->GetStackNames();
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1GetPortNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  {
    try {
      result = (arg1)->GetPortNames();
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_StackManager_1Shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  apl::dnp::StackManager *arg1 = (apl::dnp::StackManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(apl::dnp::StackManager **)&jarg1; 
  {
    try {
      (arg1)->Shutdown();
    }
    catch (apl::Exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
    catch (std::exception ex) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, ex.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BinaryOutput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::CommandRequest **)&baseptr = *(apl::BinaryOutput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Setpoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::CommandRequest **)&baseptr = *(apl::Setpoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_BoolDataPoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::DataPoint **)&baseptr = *(apl::BoolDataPoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DoublePoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::DataPoint **)&baseptr = *(apl::TypedDataPoint< double > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_UnsignedPoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::DataPoint **)&baseptr = *(apl::TypedDataPoint< boost::uint32_t > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Binary_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::BoolDataPoint **)&baseptr = *(apl::Binary **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlStatus_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::BoolDataPoint **)&baseptr = *(apl::ControlStatus **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Analog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::TypedDataPoint< double > **)&baseptr = *(apl::Analog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_Counter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::TypedDataPoint< boost::uint32_t > **)&baseptr = *(apl::Counter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_SetpointStatus_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::TypedDataPoint< double > **)&baseptr = *(apl::SetpointStatus **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_IDataObserver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::ITransactable **)&baseptr = *(apl::IDataObserver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_FixedCommandHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::ICommandHandler **)&baseptr = *(apl::FixedCommandHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_EventPointRecord_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::dnp::PointRecord **)&baseptr = *(apl::dnp::EventPointRecord **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_DeadbandPointRecord_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::dnp::EventPointRecord **)&baseptr = *(apl::dnp::DeadbandPointRecord **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_ControlRecord_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(apl::dnp::PointRecord **)&baseptr = *(apl::dnp::ControlRecord **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_petrasolar_nms_protocol_dnp3_javadnp3JNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[50] = {
    {
      "SwigDirector_INotifier_Notify", "(Lcom/petrasolar/nms/protocol/dnp3/INotifier;)V" 
    },
    {
      "SwigDirector_ILogBase_Log", "(Lcom/petrasolar/nms/protocol/dnp3/ILogBase;J)V" 
    },
    {
      "SwigDirector_ILogBase_SetVar", "(Lcom/petrasolar/nms/protocol/dnp3/ILogBase;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_IPhysicalLayerObserver_OnStateChange", "(Lcom/petrasolar/nms/protocol/dnp3/IPhysicalLayerObserver;I)V" 
    },
    {
      "SwigDirector_DataPoint_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/DataPoint;)S" 
    },
    {
      "SwigDirector_DataPoint_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/DataPoint;S)V" 
    },
    {
      "SwigDirector_DataPoint_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/DataPoint;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_BoolDataPoint_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/BoolDataPoint;)S" 
    },
    {
      "SwigDirector_BoolDataPoint_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/BoolDataPoint;S)V" 
    },
    {
      "SwigDirector_BoolDataPoint_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/BoolDataPoint;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_DoublePoint_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/DoublePoint;)S" 
    },
    {
      "SwigDirector_DoublePoint_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/DoublePoint;S)V" 
    },
    {
      "SwigDirector_DoublePoint_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/DoublePoint;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_UnsignedPoint_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/UnsignedPoint;)S" 
    },
    {
      "SwigDirector_UnsignedPoint_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/UnsignedPoint;S)V" 
    },
    {
      "SwigDirector_UnsignedPoint_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/UnsignedPoint;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Binary_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/Binary;)S" 
    },
    {
      "SwigDirector_Binary_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/Binary;S)V" 
    },
    {
      "SwigDirector_Binary_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/Binary;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ControlStatus_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/ControlStatus;)S" 
    },
    {
      "SwigDirector_ControlStatus_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/ControlStatus;S)V" 
    },
    {
      "SwigDirector_ControlStatus_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/ControlStatus;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Analog_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/Analog;)S" 
    },
    {
      "SwigDirector_Analog_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/Analog;S)V" 
    },
    {
      "SwigDirector_Analog_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/Analog;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Counter_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/Counter;)S" 
    },
    {
      "SwigDirector_Counter_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/Counter;S)V" 
    },
    {
      "SwigDirector_Counter_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/Counter;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_SetpointStatus_GetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/SetpointStatus;)S" 
    },
    {
      "SwigDirector_SetpointStatus_SetQuality", "(Lcom/petrasolar/nms/protocol/dnp3/SetpointStatus;S)V" 
    },
    {
      "SwigDirector_SetpointStatus_ToString", "(Lcom/petrasolar/nms/protocol/dnp3/SetpointStatus;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITransactable__Start", "(Lcom/petrasolar/nms/protocol/dnp3/ITransactable;)V" 
    },
    {
      "SwigDirector_ITransactable__End", "(Lcom/petrasolar/nms/protocol/dnp3/ITransactable;)V" 
    },
    {
      "SwigDirector_IDataObserver__Start", "(Lcom/petrasolar/nms/protocol/dnp3/IDataObserver;)V" 
    },
    {
      "SwigDirector_IDataObserver__End", "(Lcom/petrasolar/nms/protocol/dnp3/IDataObserver;)V" 
    },
    {
      "SwigDirector_IDataObserver__Update__SWIG_0", "(Lcom/petrasolar/nms/protocol/dnp3/IDataObserver;JJ)V" 
    },
    {
      "SwigDirector_IDataObserver__Update__SWIG_1", "(Lcom/petrasolar/nms/protocol/dnp3/IDataObserver;JJ)V" 
    },
    {
      "SwigDirector_IDataObserver__Update__SWIG_2", "(Lcom/petrasolar/nms/protocol/dnp3/IDataObserver;JJ)V" 
    },
    {
      "SwigDirector_IDataObserver__Update__SWIG_3", "(Lcom/petrasolar/nms/protocol/dnp3/IDataObserver;JJ)V" 
    },
    {
      "SwigDirector_IDataObserver__Update__SWIG_4", "(Lcom/petrasolar/nms/protocol/dnp3/IDataObserver;JJ)V" 
    },
    {
      "SwigDirector_IResponseAcceptor_AcceptResponse", "(Lcom/petrasolar/nms/protocol/dnp3/IResponseAcceptor;JI)V" 
    },
    {
      "SwigDirector_ICommandAcceptor_AcceptCommand__SWIG_0", "(Lcom/petrasolar/nms/protocol/dnp3/ICommandAcceptor;JJIJ)V" 
    },
    {
      "SwigDirector_ICommandAcceptor_AcceptCommand__SWIG_1", "(Lcom/petrasolar/nms/protocol/dnp3/ICommandAcceptor;JJIJ)V" 
    },
    {
      "SwigDirector_ICommandHandler_HandleControl__SWIG_0", "(Lcom/petrasolar/nms/protocol/dnp3/ICommandHandler;JJ)I" 
    },
    {
      "SwigDirector_ICommandHandler_HandleControl__SWIG_1", "(Lcom/petrasolar/nms/protocol/dnp3/ICommandHandler;JJ)I" 
    },
    {
      "SwigDirector_FixedCommandHandler_HandleControl__SWIG_0", "(Lcom/petrasolar/nms/protocol/dnp3/FixedCommandHandler;JJ)I" 
    },
    {
      "SwigDirector_FixedCommandHandler_HandleControl__SWIG_1", "(Lcom/petrasolar/nms/protocol/dnp3/FixedCommandHandler;JJ)I" 
    },
    {
      "SwigDirector_ICommandSource_SetNotifier", "(Lcom/petrasolar/nms/protocol/dnp3/ICommandSource;J)V" 
    },
    {
      "SwigDirector_ICommandSource_ExecuteCommand", "(Lcom/petrasolar/nms/protocol/dnp3/ICommandSource;J)Z" 
    },
    {
      "SwigDirector_IStackObserver_OnStateChange", "(Lcom/petrasolar/nms/protocol/dnp3/IStackObserver;I)V" 
    }
  };
  Swig::jclass_javadnp3JNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_javadnp3JNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif


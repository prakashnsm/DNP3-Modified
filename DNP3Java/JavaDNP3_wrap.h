/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_javadnp3_WRAP_H_
#define SWIG_javadnp3_WRAP_H_

class SwigDirector_INotifier : public apl::INotifier, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_INotifier(JNIEnv *jenv);
    virtual ~SwigDirector_INotifier();
    virtual void Notify();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_ILogBase : public apl::ILogBase, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ILogBase(JNIEnv *jenv);
    virtual ~SwigDirector_ILogBase();
    virtual void Log(apl::LogEntry const &arEntry);
    virtual void SetVar(std::string const &aSource, std::string const &aVarName, int aValue);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_IPhysicalLayerObserver : public apl::IPhysicalLayerObserver, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_IPhysicalLayerObserver(JNIEnv *jenv);
    virtual ~SwigDirector_IPhysicalLayerObserver();
    virtual void OnStateChange(apl::PhysicalLayerState arg0);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_DataPoint : public apl::DataPoint, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_DataPoint(JNIEnv *jenv, boost::uint8_t aQuality, apl::DataTypes aType);
    virtual ~SwigDirector_DataPoint();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_BoolDataPoint : public apl::BoolDataPoint, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BoolDataPoint(JNIEnv *jenv, boost::uint8_t aQuality, apl::DataTypes aType, boost::uint8_t aValueMask);
    virtual ~SwigDirector_BoolDataPoint();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_DoublePoint : public apl::TypedDataPoint< double >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_DoublePoint(JNIEnv *jenv, boost::uint8_t aQuality, apl::DataTypes aType);
    virtual ~SwigDirector_DoublePoint();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_UnsignedPoint : public apl::TypedDataPoint< boost::uint32_t >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_UnsignedPoint(JNIEnv *jenv, boost::uint8_t aQuality, apl::DataTypes aType);
    virtual ~SwigDirector_UnsignedPoint();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_Binary : public apl::Binary, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Binary(JNIEnv *jenv, bool aValue, boost::uint8_t aQuality = apl::BQ_RESTART);
    SwigDirector_Binary(JNIEnv *jenv);
    virtual ~SwigDirector_Binary();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_ControlStatus : public apl::ControlStatus, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ControlStatus(JNIEnv *jenv, bool aValue, boost::uint8_t aQuality = apl::TQ_RESTART);
    SwigDirector_ControlStatus(JNIEnv *jenv);
    virtual ~SwigDirector_ControlStatus();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_Analog : public apl::Analog, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Analog(JNIEnv *jenv);
    SwigDirector_Analog(JNIEnv *jenv, double aVal, boost::uint8_t aQuality = apl::AQ_RESTART);
    virtual ~SwigDirector_Analog();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_Counter : public apl::Counter, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Counter(JNIEnv *jenv);
    SwigDirector_Counter(JNIEnv *jenv, boost::uint32_t aVal, boost::uint8_t aQuality = apl::CQ_RESTART);
    virtual ~SwigDirector_Counter();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_SetpointStatus : public apl::SetpointStatus, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_SetpointStatus(JNIEnv *jenv);
    SwigDirector_SetpointStatus(JNIEnv *jenv, double aVal, boost::uint8_t aQuality = apl::PQ_RESTART);
    virtual ~SwigDirector_SetpointStatus();
    virtual boost::uint8_t GetQuality() const;
    virtual void SetQuality(boost::uint8_t aQuality);
    virtual std::string ToString() const;
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_ITransactable : public apl::ITransactable, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ITransactable(JNIEnv *jenv);
    virtual ~SwigDirector_ITransactable();
    virtual void _Start();
    virtual void _End();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_IDataObserver : public apl::IDataObserver, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_IDataObserver(JNIEnv *jenv);
    virtual ~SwigDirector_IDataObserver();
    virtual void _Start();
    virtual void _End();
    virtual void _Update(apl::Binary const &arPoint, size_t arg1);
    virtual void _Update(apl::Analog const &arPoint, size_t arg1);
    virtual void _Update(apl::Counter const &arPoint, size_t arg1);
    virtual void _Update(apl::ControlStatus const &arPoint, size_t arg1);
    virtual void _Update(apl::SetpointStatus const &arPoint, size_t arg1);
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_IResponseAcceptor : public apl::IResponseAcceptor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_IResponseAcceptor(JNIEnv *jenv);
    virtual ~SwigDirector_IResponseAcceptor();
    virtual void AcceptResponse(apl::CommandResponse const &arResponse, int aSequence);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_ICommandAcceptor : public apl::ICommandAcceptor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ICommandAcceptor(JNIEnv *jenv);
    virtual ~SwigDirector_ICommandAcceptor();
    virtual void AcceptCommand(apl::BinaryOutput const &arCommand, size_t aIndex, int aSequence, apl::IResponseAcceptor *apRspAcceptor);
    virtual void AcceptCommand(apl::Setpoint const &arCommand, size_t aIndex, int aSequence, apl::IResponseAcceptor *apRspAcceptor);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_ICommandHandler : public apl::ICommandHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ICommandHandler(JNIEnv *jenv);
    virtual ~SwigDirector_ICommandHandler();
    virtual apl::CommandStatus HandleControl(apl::BinaryOutput &aControl, size_t aIndex);
    virtual apl::CommandStatus HandleControl(apl::Setpoint &aControl, size_t aIndex);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_FixedCommandHandler : public apl::FixedCommandHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_FixedCommandHandler(JNIEnv *jenv, apl::CommandStatus aStatus);
    virtual ~SwigDirector_FixedCommandHandler();
    virtual apl::CommandStatus HandleControl(apl::BinaryOutput &arg0, size_t arg1);
    virtual apl::CommandStatus HandleControl(apl::Setpoint &arg0, size_t arg1);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_ICommandSource : public apl::ICommandSource, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ICommandSource(JNIEnv *jenv);
    virtual ~SwigDirector_ICommandSource();
    virtual void SetNotifier(apl::INotifier *apNotifier);
    virtual bool ExecuteCommand(apl::ICommandHandler *apHandler);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_IStackObserver : public apl::dnp::IStackObserver, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_IStackObserver(JNIEnv *jenv);
    virtual ~SwigDirector_IStackObserver();
    virtual void OnStateChange(apl::dnp::StackStates aState);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};


#endif
